{
  "name": "PgBouncer",
  "id": "pgbouncer",
  "title": "Run and Manage PgBouncer on Kubernetes",
  "hero": "/assets/images/databases/illustrations/kc-bg.svg",
  "summary": "Provision, Upgrade, Scaling, Volume Expansion, Monitor, Backup & Restore, Security for PgBouncer in Kubernetes on any Public & Private Cloud",
  "description": "As the world’s enterprises rapidly move to the cloud, and containers are taking over the world of software development, Kubernetes is the platform that lets users seamlessly deploy, scale, run containers, and manage their application life-cycle.  <br />  <br />But, running databases and stateful applications in Kubernetes has always been a challenge. And it is really difficult to **Run and Manage Production-Grade Databases on Kubernetes**. Every Enterprise needs a Production-Grade operator to deploy its databases and manage its life cycle on Kubernetes. <br />   <br />KubeDB is the leader in Kubernetes Native Database Management Solutions which simplifies and automates routine database tasks such as **Provisioning, Monitoring, Upgrading, Patching, Scaling, Volume Expansion, Backup & Restore, Failure detection, and Recovery** for various popular databases on private and public clouds. KubeDB developed the first-ever Production-Grade **Kubernetes operator for PgBouncer** to manage its Day-2 operations. KubeDB is a managed DBaaS that allows developers to run their databases alongside the respective application. You can simply deploy PgBouncer on Kubernetes and manage its Day-2 operations via KubeDB PgBouncer Operator.",
  "keywords": [
    "Provision",
    "Failure Detection",
    "Upgrade",
    "Scaling",
    "Volume Expansion",
    "Backup & Recovery",
    "Monitor",
    "Data Protection for PgBouncer in Kubernetes on Public and Private Cloud"
  ],
  "features": [
    {
      "title": "Provisioning",
      "image": "/assets/images/databases/illustrations/colud-chair.gif",
      "description": "If you can run Kubernetes, you can simply provision PgBouncer using KubeDB. You don’t need to worry about all of the knowledge of Kubernetes Concept, Helm, and PgBouncer server side setup. KubeDB simplifies the whole process for you. You just have to use standard Kubernetes CLI and API to provision PgBouncer."
    },
    {
      "title": "Version Upgrade",
      "image": "/assets/images/databases/illustrations/version-control.gif",
      "description": "Upgrading the pgbouncer version in Kubernetes is complicated. Upgrade operation should follow a specific order. KubeDB allows you to upgrade your running PgBouncer version without any downtime. You can upgrade your pgbouncer to any major or minor update of the PgBouncer version."
    },
    {
      "title": "Scaling",
      "image": "/assets/images/databases/illustrations/scalling.png",
      "description": "To improve your pgbouncer performance you have to make sure that your pgbouncer is scalable. KubeDB offers both Vertical and Horizontal Scaling of PgBouncer in Kubernetes. You can simply scale your PgBouncer cluster in Kubernetes using KubeDB."
    },
    {
      "title": "Monitoring",
      "image": "/assets/images/databases/illustrations/overview.gif",
      "description": "KubeDB comes with native support for monitoring via Prometheus. You can use builtin Prometheus scrapper or CoreOS Prometheus Operator to monitor your PgBouncer in Kubernetes. You can use the Grafana to view key operational metrics, including compute/memory/storage capacity utilization, I/O activity, and instance connections."
    },
    {
      "title": "Security",
      "image": "/assets/images/databases/illustrations/security.gif",
      "description": "To secure a pgbouncer your data needs to go through a cryptographic protocol that provides end-to-end security of the data transmission over the network. You can secure your PgBouncer with TLS using KubeDB. Also, KubeDB allows you to use encrypted storage for your pgbouncer using keys you manage through your cloud provider’s key management service."
    }
  ],
  "example": {
    "apiVersion": "kubedb.com/v1alpha2",
    "kind": "PgBouncer",
    "metadata": {
      "name": "pgbouncer-demo",
      "namespace": "demo"
    },
    "spec": {
      "version": "1.18.0",
      "replicas": 1,
      "databases": [
        {
          "alias": "postgres",
          "databaseName": "postgres",
          "databaseRef": {
            "name": "quick-postgres",
            "namespace": "demo"
          }
        }
      ],
      "connectionPool": {
        "maxClientConnections": 20,
        "reservePoolSize": 5,
        "adminUsers": [
          "admin",
          "admin1"
        ]
      },
      "userListSecretRef": {
        "name": "db-user-pass"
      },
      "terminationPolicy": "Delete"
    }
  }
}
