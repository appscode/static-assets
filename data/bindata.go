// Package data Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// clouds.json
// customers.json
// press.json
// testimonials.json
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd3\xb1\x6a\xc3\x30\x10\x06\xe0\x3d\x4f\x71\x78\x0e\xf1\x9e\x2d\x6d\xa1\x4b\x4b\x0a\x19\x3a\x2b\xe7\xab\x6a\x2c\xeb\x84\xa4\x34\x34\x25\xef\x5e\x24\x05\xa7\x95\x34\x6a\x0b\xa7\xcb\xff\x7f\x18\xee\x67\x05\xd0\x89\xb3\xeb\xb6\x10\x7e\x02\x74\x13\x7d\x77\xdb\x34\x5b\xa7\x89\x62\xc9\xcb\x3b\x40\xe7\x2c\x86\x8d\x4f\xef\x8d\xdb\xf6\x3d\x0e\x7a\x23\x8c\x71\xc8\x03\x6d\x90\xe7\x7e\x9c\x85\x24\xd7\xa3\xe2\xd3\xe0\x7a\x71\x76\x1b\xa3\xe5\x2d\x2c\xb4\x29\x1f\xfe\xbe\x9b\xc5\x85\x35\xbc\xd3\x11\x0e\x64\xbf\x46\x24\xd7\xc5\x95\xeb\x0a\xe0\xba\x8e\xae\xcb\xc9\x52\x29\x8b\xd3\x36\xb6\x10\x55\xd5\xbd\x8e\x68\xd9\xf1\x87\x87\x5d\xac\xcb\x64\x12\x4b\x57\x98\x35\x51\x49\x34\x55\xd3\x33\xb3\x54\x04\x8f\x61\x2b\x07\x0d\xa3\x1c\xbd\x50\x8c\x24\x74\x21\xfb\xf7\xd8\x84\xf8\x37\xb1\x6a\x7d\x4a\x0b\xfb\x58\x99\x59\xd5\xa8\x79\x28\xbf\xdf\x6d\xdc\xc4\x97\xb2\xaa\xb2\x97\x54\x93\x99\xd8\x90\x76\x5e\xe0\x54\xb0\xee\x2f\x4d\x64\x4b\x5c\x15\xb7\x37\xa4\x0f\xb1\x2c\xf3\x19\x81\x13\xf9\x02\x77\x1b\x37\x91\xa5\xac\x2a\xeb\x2d\xd5\x64\xa6\xa3\xb0\x34\x93\x17\xaa\x60\xdd\x5f\x9a\xc8\x96\xb8\x2a\xee\x61\x29\xcb\x6f\x82\x71\x22\x5b\x5e\x43\x1a\xb7\xb9\x83\x98\x55\xbf\x80\x54\x73\x37\xad\xae\xbf\x01\x00\x00\xff\xff\x80\x8b\x61\x4c\x6d\x05\x00\x00")

func cloudsJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudsJson,
		"clouds.json",
	)
}

func cloudsJson() (*asset, error) {
	bytes, err := cloudsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clouds.json", size: 1389, mode: os.FileMode(420), modTime: time.Unix(1567469222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _customersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\xea\xa3\x30\x10\x87\xef\x7d\x8a\xe0\x79\x6b\xee\xde\x5a\xba\xec\x16\x3c\x14\xf7\xb6\x97\x25\xea\x54\x03\x31\x09\xc9\xa8\x74\x97\xbe\xfb\x92\xd4\x50\x41\x6b\xfd\xd7\x93\x90\xdf\xcc\xe7\x37\x03\xf3\x6f\x47\x48\xc4\x25\x82\xb1\x37\x8b\xd0\xd8\x28\x21\xee\x8d\x90\x48\xb2\x06\xa2\x84\x44\x67\x97\xfe\x1a\xd2\x6f\x8f\xac\x87\xdc\x72\xf4\x71\x8d\xa8\x6d\x42\x69\xdf\xf7\xf1\x18\x14\x17\xaa\x09\xe5\x42\x55\x6a\x5c\x5b\x94\x32\x66\x5a\xdb\x42\x95\xe0\xea\x28\x6f\x58\x05\x96\x16\xad\x45\xd5\x80\xb1\x74\x4c\xa2\xae\x3d\xd6\xb2\x0a\x38\x5b\xab\x3e\x4a\x08\x9a\x16\x76\x84\xdc\xdd\x6b\x04\x42\xd7\x60\x38\x9b\xfa\x7f\x0f\xc9\xb2\x7b\x00\x6c\xf3\x0e\x94\x55\xce\x7f\x21\x37\x33\xc2\xbf\xfd\xf3\xb2\xad\x6f\xdd\xa6\xea\x11\xab\x3c\xb5\xe1\x05\xd4\x6d\x9e\x0b\x98\xda\x5e\x5c\xf8\xd3\x87\xe4\xf0\x63\x41\x7b\x44\xd9\x26\x3e\x02\x3d\xf4\x6d\xb7\xa8\x6f\x5a\x59\xf5\xec\x36\x55\xcf\x86\xe0\xb5\xf3\xd0\xba\xcd\x77\x80\xac\x5a\x75\x09\x9d\x12\x2d\x72\x25\x67\x2e\xf1\xf4\x0c\x63\x09\xb8\xe0\x5d\xce\x57\x7e\xdd\x7d\x04\xa2\xa3\xdf\x1f\x45\x0b\xfb\x34\x9b\x99\xe6\xca\x84\x7d\x8e\x23\x78\x07\x86\x35\x7a\x3a\x4b\xca\x3b\xc8\x5c\xf2\x7a\x88\xd0\xbc\x6d\xfb\x81\xb2\x6a\xfd\x39\x37\x25\x9f\xca\x1e\xcf\xd9\xe9\x4c\x2e\x78\x23\x29\x96\x6f\x2e\xd3\x23\x9c\x4a\xcc\xda\xcf\xad\x3d\x85\xfa\xff\xee\x53\x55\xa9\x3f\x19\x20\x97\xec\x9d\x3f\xb3\xc8\x0c\xce\x5c\xe9\x61\x08\xe6\xdd\x13\x4a\x87\xce\xbd\x16\x0c\xaf\xca\x34\xb1\x32\xd5\xe7\xfa\x03\x2d\x7c\x17\xb4\x77\xf7\xff\x01\x00\x00\xff\xff\xd8\x50\x11\x81\x83\x06\x00\x00")

func customersJsonBytes() ([]byte, error) {
	return bindataRead(
		_customersJson,
		"customers.json",
	)
}

func customersJson() (*asset, error) {
	bytes, err := customersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "customers.json", size: 1667, mode: os.FileMode(420), modTime: time.Unix(1571828234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pressJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x5f\x6f\x5c\x45\x0c\xc5\xdf\xf3\x29\xac\x3c\xef\x1f\x9a\x14\x22\x2a\x21\x04\x9b\x56\xad\x8a\x02\x0a\x41\x11\x42\x3c\x78\x67\xbc\x7b\x87\x9d\x19\x8f\x6c\xdf\xbd\xac\x50\xbf\x3b\xf2\xbd\xd9\x74\x85\x92\xaa\x0f\xe5\x31\xb9\x33\xf6\x99\x73\x7e\xf6\xfe\x71\x06\xf0\xcf\x19\x00\xc0\xb9\x25\xcb\x74\xfe\x0a\xce\x2f\x81\x1b\x55\x50\xee\x25\x10\x34\xe1\xbf\x28\x98\x82\x75\x68\x50\x70\x47\xf0\xbe\x5f\x93\x54\x32\x52\x20\xd4\x44\x72\x3e\x9b\x4a\x68\x5f\x0a\xca\xc1\x8b\xbc\x11\x2e\x10\x72\xaf\x46\x02\x6a\x68\x04\x05\x2b\x6e\xa9\x50\x35\x30\x06\xad\xd8\xb4\x63\x53\xc0\x1a\xe1\xfa\x76\x06\x81\x4b\xc3\x9a\xb8\x82\x31\x67\x85\x8d\x97\x78\x4b\xcd\x12\xcf\xc6\x9e\x71\x36\x9e\x7d\xdf\xaf\x53\x60\xa9\x80\xa9\x78\xa5\x4d\xca\x19\xac\x23\xd8\x62\x53\x48\xf5\x44\xdf\xe2\xa8\x2c\xa7\xba\x73\x59\x9d\x59\xd3\x57\xcb\xe5\x30\x0c\x8b\x54\x37\x3c\xb0\xe4\xb8\x08\x5c\x96\x28\x96\x42\xa6\xe5\xe5\xc5\x8b\x97\xdf\x5c\x5c\x2d\x2f\xe7\xee\xc2\x7c\x72\x61\x7e\x74\x61\xee\x2e\xcc\xdd\x85\xf9\xee\xb1\xcb\x7c\x72\x61\xd1\x59\xc9\xc7\x86\x96\x0a\xdd\xf1\x2d\x61\xf4\xb6\x5f\x43\x49\x55\x5d\xec\xf8\x9f\x87\x33\xa9\xe0\xd6\x1d\x9f\x02\x70\xff\x24\x9c\x8a\x0c\xb1\x2e\xb0\x35\x0d\x1c\x69\xd4\x38\x5e\xd0\x65\x13\x52\x5d\xbe\x58\x0c\xb4\x6e\xe7\xe3\xdd\x0f\x67\x00\x1f\x66\x4f\x64\x79\xdb\xd7\x9a\xea\x16\x7e\xe7\x5e\xe0\x1a\x0d\xd7\xa8\x04\x3f\x9f\x7a\x04\xf7\xc9\xba\xf1\xef\xeb\x1f\x9f\x08\xf2\xe4\x60\x52\x40\x88\x92\xf6\x5e\x71\xc3\x4e\x47\xaa\xa3\xf3\x42\x15\x93\x2a\xd6\x40\x80\xc2\x7d\x8d\x10\xa9\x65\x3e\xf8\x49\xcf\x4c\x1e\x74\x60\x6b\x39\x05\xb4\xc4\x55\x17\xf0\x96\x07\xda\x93\xcc\x26\x34\xfc\xbb\x17\x8b\x47\x99\x19\x0f\x24\xde\x55\xcd\x23\x46\x50\x6a\x28\x8e\x52\xe0\x1a\x48\xea\x02\xee\x3a\x7a\x90\x7e\x04\x15\x06\x54\x08\x42\x68\x14\x01\x5d\xf1\x80\x07\xe0\x8d\x7f\xdf\xa7\x38\x8a\x00\x4d\xa5\x65\x82\x42\xa1\xc3\x9a\xb4\xf8\x6b\x1e\x35\x1e\xdc\x2b\x35\x16\xdc\x12\xe8\x41\x8d\xca\xf1\x9d\x8a\x85\xa0\x65\xb4\x0d\x4b\xf1\xea\xe3\xd9\x93\x47\x7d\x12\x38\x7f\x18\xd5\x6d\xaa\x44\x92\xea\xb6\x71\x0c\xa8\x36\x26\xeb\x30\xc5\xf5\x29\x53\x47\x17\xe6\xd4\x92\x72\xa4\xf9\xd5\xb7\xcb\x67\xe0\xfa\xea\x91\xae\x9f\x92\x1a\xd5\x2f\xc3\xd7\xc5\xe7\xf0\xb5\xba\x59\xbd\x81\xd7\x55\x7b\x21\x3d\x65\xea\x5d\x35\x12\x9f\x20\xc1\x75\xca\xc9\x0e\x30\x38\x65\x08\x2b\x12\x83\x5f\x84\xb7\x82\xe5\x09\xda\x3c\xcf\x55\xe6\x3e\xc2\x0d\x5a\xda\x13\xac\xb8\xb4\xde\x3c\x96\x37\x8e\xd5\x68\x32\x74\xe8\x73\x6e\xc2\xb1\x0f\x14\xc7\x64\x2a\x0d\x10\x48\x2c\x6d\x1e\x92\xf0\xbc\xbd\x89\xdb\xd2\x51\x6e\x40\xa3\x4a\x08\x63\xf5\x09\x06\x92\x69\xfb\xb0\x75\xbe\xa5\x48\xf6\x29\x90\xc2\x9e\x6a\x64\x51\x10\x2a\x98\xea\xb4\x97\x2c\xad\x33\x4d\x8f\xe0\x4a\x80\x75\xba\x83\x3a\x76\x6f\xdc\xfa\x8c\xe2\x5c\x1a\xa6\x4a\x02\x2c\xa1\x23\x35\x79\xd4\x32\xb2\x69\xb8\x23\x85\x8e\x73\x74\x22\xfd\x66\xaa\xb1\x57\x93\xc3\xb3\xe0\x58\x47\x95\x06\x35\x0c\xbb\x45\xe2\x65\xa8\x61\x33\x7f\x7c\xbb\xce\xc3\x73\x50\xfc\x0f\x1b\xe7\xf2\x73\x88\x38\x81\xe0\x64\x2e\xa0\x61\xd8\x4d\x23\x3e\xae\xf5\x4d\x12\x35\x68\x92\x6a\x48\x2d\x93\x3e\x81\xc2\x5b\xca\xc5\x87\xdf\x5d\x2a\xec\xa7\x1f\x4c\xf6\x79\xf6\x79\xfd\x58\xf2\x74\xab\x8c\x9f\x4e\x7e\x01\xe0\x9d\x8f\xae\xd7\xc1\xbc\x9b\xc1\x1d\x16\xcc\xf0\x2b\x76\x38\x9b\x88\xf2\xac\x36\xf0\x43\x6b\xba\xe2\x48\x40\x7f\xb7\xcc\x32\x86\x34\xc0\x28\xe1\x02\x02\x56\x58\xd3\xb4\x34\xd2\x26\x51\xfc\xe4\x94\x1f\xb8\xb7\x7e\x3d\xd9\x37\xa0\x85\xee\xfb\xfd\x77\x57\x37\xd7\xbf\x5d\xbd\xdf\xdd\x73\x7e\xfd\x74\x5c\x2f\x3e\xce\xf0\xbd\xdf\xf9\x32\x81\xbd\xfc\x6f\x60\x67\x7f\x9e\xfd\x1b\x00\x00\xff\xff\xed\x53\xd5\x65\xf2\x07\x00\x00")

func pressJsonBytes() ([]byte, error) {
	return bindataRead(
		_pressJson,
		"press.json",
	)
}

func pressJson() (*asset, error) {
	bytes, err := pressJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "press.json", size: 2034, mode: os.FileMode(420), modTime: time.Unix(1579817821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testimonialsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xc1\x6e\xdc\xc8\x11\xbd\xfb\x2b\x2a\x3a\xc4\x09\x30\xe2\x5c\x02\x04\x58\x6c\x0c\x08\x96\xd7\x36\xac\x5d\x0b\x56\x10\x1f\xe2\x40\x28\x76\xd7\x90\x6d\x35\xbb\x1a\x55\xcd\xe1\x52\x41\xfe\x27\x97\x9c\xf2\x09\xfe\xb1\xa0\x9a\x43\x69\xa0\xb5\x75\x70\xa0\x8b\x31\x66\x93\xd5\xaf\xea\xbd\x7a\x55\xfa\xfb\x33\x80\x7f\x3e\x03\x00\x38\x49\x38\xd0\xc9\x0f\x70\x72\x31\x3a\x84\x0f\xb8\xc7\xdb\x5b\x8e\x7c\xb2\x59\x4e\x3f\x73\x6b\x87\x97\xc2\x7e\x74\x05\x7e\xc6\x84\x1d\xc9\x7a\x4a\x03\x86\x68\xe7\xeb\x83\x2c\xbc\x0b\xb1\xc6\xeb\x4b\xc9\xfa\xc3\x76\xeb\x7c\x6a\x30\x67\x75\xec\xa9\x71\x3c\x6c\xc3\x80\x1d\xe9\xd6\x8d\x5a\x78\x20\xd1\x6d\x26\x51\x4e\xba\x8d\xa3\xc3\x6b\x59\x11\x34\x13\xb5\x79\x8d\xeb\x78\xc8\x98\xe6\x77\x34\x5b\xe8\x90\x0a\x89\xce\x5a\x68\xd0\xa3\x9b\x0d\xe1\xe1\x0d\xc7\x49\xc7\x58\x42\xea\xd6\xf3\x42\x5a\xc2\xc0\x29\x60\x05\xfc\xd6\x42\x5c\x2d\x21\x60\x42\x05\x4f\x31\x74\x7d\x21\x0f\x85\x81\x52\x87\x1d\xc1\x14\x4a\x0f\x67\x39\xeb\x4b\xf6\x04\x21\x41\xe9\xa9\xbe\xe8\xb0\xd0\x06\x66\x2a\xb0\x1b\x93\xc7\x81\x52\xc1\x08\x05\xf5\x06\x78\x07\x3a\xe6\xcc\x62\x97\x83\x1f\x05\xdb\x48\x1b\x48\x9c\x4e\x29\xf7\x34\x90\x60\x84\x89\xe5\x26\x32\x7a\x5d\xae\x78\x37\xb6\x24\x89\x0a\x69\x03\x1f\x09\x12\x91\x37\x1c\x3d\x41\x4b\x5a\x4e\xb3\x50\x46\x21\xbf\x81\x81\xeb\x7f\x79\x17\x5c\xa0\x54\xc0\x63\xc1\x16\x95\x80\x33\x09\x16\x16\xb8\x4f\x7c\xc5\x1b\x92\x1f\xb5\xc8\xdc\xc0\xeb\xb0\xa7\x74\x97\xcf\x73\x85\x4c\x3e\x74\x42\x64\xa0\xef\x42\xb5\x63\x88\xde\xbe\x5f\x63\xea\xe6\x90\xb7\x0b\x1a\x38\xd5\x6a\x11\xea\xdc\xc0\x2f\x0c\x25\x0c\x54\x9f\x4c\xa8\x56\x3c\x4c\x1e\x30\x46\xe0\xf6\x33\xb9\x12\xf6\xa4\x20\x84\xae\x27\x6f\x78\x30\x01\x0e\x78\x1b\x52\x17\x67\xd0\x9e\xa5\x40\x26\x09\xec\x0d\x81\x85\x6a\xe0\x2d\x4c\x3c\x46\x0f\x42\x8e\x87\x81\x92\xbf\x27\xe0\x28\xb7\x1d\x0b\x60\x9a\x8f\x2a\x07\x42\x11\x0d\x81\xd5\xb6\x39\x79\x06\xf0\xaf\xcd\x6f\x45\xfe\x33\x4a\x60\x78\xc7\xb7\x9f\xf1\xe6\x81\xc4\xaf\x38\x8e\x25\x70\x52\x38\x13\xd7\x87\x42\xae\x3c\x8d\xcc\x07\xc3\x70\x7d\x53\x31\x3c\x22\x72\x8a\xb9\x27\x09\xf8\x75\x81\xef\x79\x3e\x6e\xc4\x07\xea\xfe\xdb\x72\x0a\x03\x9a\x6e\x0b\x68\x18\x72\xa4\x4a\x0e\xed\x56\xf1\x58\x0d\x47\x35\xb9\x67\x61\x4b\xb7\x9e\x87\x14\x4a\xc0\x42\xc0\xa3\x40\x8b\x42\x30\x90\x89\xfb\xa8\xd2\xab\x7a\x1b\x78\x5b\x14\xc6\xe4\x49\xe2\x6c\xac\x14\x72\x7d\xe2\xc8\xdd\xbc\x5c\xf5\x6b\xa1\xa4\x61\x4f\x70\xf1\xa7\xb5\x29\x00\x23\xa7\x6e\x91\xbd\x12\x0e\x91\x54\xe1\xea\xea\x02\xac\xa7\x3b\x41\x63\x00\x82\xc2\xd4\x63\x59\xe0\x8f\x0a\xae\x67\x56\x82\x35\x2b\xde\xdb\x3f\xa5\x27\xd1\xe6\xee\x61\x21\x1c\xec\x43\x8c\xca\xb0\x27\x99\x41\x48\x33\x2f\xf7\x4f\x3d\x25\xab\x83\xe3\x81\x6a\xc6\x07\x34\x0d\xbc\x16\xc2\x02\x87\xda\xfe\xee\xdb\xb2\x49\x23\x45\xf8\x80\xc3\x97\xff\x08\xdd\xc2\xc5\x97\xff\x66\xba\x7d\x20\xa0\x73\xda\xbf\xcf\x0a\xaf\x52\x17\x12\x3d\x95\x47\x0e\x15\xc9\xb5\x1c\x90\x5c\xc7\x8a\xe4\x11\x19\x65\x09\x8e\xfa\xb1\x6d\x23\xfd\x3f\x4a\x0a\x5a\x4d\x80\x50\x03\x69\x81\x09\x67\x2b\xe3\xa8\x54\x1f\xef\x50\x17\xf5\x08\xc5\x60\x86\x07\x6f\xce\x2e\x85\x7f\x9d\x01\xb5\x0a\x29\xa4\x4e\x8c\x69\xc7\xa9\x08\xc7\x48\xd2\xc0\x59\x81\x4b\x03\xf7\xa6\x82\xdb\x18\x3f\x87\x5b\x1c\x4b\x22\x39\xd5\xc2\xa9\x7a\x53\x95\x62\x1c\x69\x6b\x66\x95\xc0\x53\x8e\x3c\x9b\xe9\xea\x37\x1b\xfd\x43\x70\x3d\x09\x5c\xa0\x84\x7d\xf8\xf2\x6f\xa1\xaf\x90\x75\x79\x05\x57\x99\x5c\xc0\x18\xf4\x89\x7a\x5d\x2a\x8c\xeb\x78\x07\xe3\x11\xa6\x3c\xed\x57\x0b\xfa\x1e\xa6\xde\xd6\xbe\x5c\x3a\x0b\x61\x47\xd3\x71\xcb\xba\x38\xaa\xcd\xcc\x4a\xd2\x44\x95\xb8\x95\xda\x03\x45\x59\x68\x47\x22\xd5\xa8\x7f\x4b\xd6\x47\x32\x1f\x8f\x71\x86\x18\x6e\x68\xd5\x42\x65\xc7\x71\xda\x85\x6e\x5c\x7a\xb7\x81\x73\x76\x63\x1d\x88\x6b\x2b\x67\xa1\x52\x66\xe8\x98\x7d\x03\x67\xd6\x9e\xf6\xf5\xb8\x7c\xfc\x06\x17\x9d\x04\x85\x30\x58\x4b\xe2\xbd\x33\xb5\xe4\xd0\x5e\x0b\xa5\xa6\xa6\x2b\x82\x89\x62\x5c\xf2\x6c\xb9\xf4\x66\x2e\x96\xd5\xc5\x9f\xc1\x4c\x09\x5a\x8c\x98\x5c\x48\x5d\x03\xef\xef\xe5\xf3\xd7\x97\x97\xa0\x24\xfb\xe0\x48\x37\xf0\x11\xe7\x1b\xf8\x85\xa7\x4d\x75\x0c\xd3\x6b\xe1\x1a\x51\x8b\x85\x2a\x3d\x8f\x8a\xc9\xab\x7d\x6d\x54\x06\x2d\xe6\x98\x8e\x53\xb2\xa9\x66\x43\xa2\x5a\x8c\x0e\xcc\xa5\x8f\x33\x60\xa9\x49\x29\x0e\xb4\xcc\xb1\x6f\xe9\xf2\x1c\x53\xa0\x08\xaf\x59\x86\x38\x3f\x9c\x40\x94\x02\x0b\x9c\xd3\x9e\xa2\x0d\xdf\xa7\x91\xa4\xaf\x08\xae\xbb\x8a\xe0\x11\x39\xb6\x41\x7c\xf8\x1e\x21\x3e\x90\xca\xa8\x36\x1a\x0e\x62\x5b\x46\x86\x16\x41\x5b\xb6\x76\x2c\x13\x8a\x3f\x88\x32\xc6\x53\x7f\xd0\x0e\xf9\x83\xaa\xea\x91\x8d\x87\x3f\x90\x2e\xad\x1a\x67\xb8\xa0\xf2\xdc\x7c\xd6\xc9\x9c\xcb\x1f\xa1\x47\x5d\x26\x85\xf1\x3c\x84\x75\x88\xd8\x22\x76\x20\xdc\xd8\x3d\x6a\x06\x84\x56\x88\x6e\xa9\x81\x57\xe8\x7a\x18\xf0\x33\x8b\xf1\x59\xb7\x1b\x8b\xd6\x9a\xcb\xe0\x42\xf1\x44\xd1\xa6\x06\x8c\xd9\x63\xa1\x6f\x4e\x88\xf3\xba\x58\xfc\x24\xe4\xef\x8b\x76\xa0\xf5\x27\xae\x23\x12\x7e\x0f\x2f\x5f\xbd\x7f\x2a\x4e\x6d\xa5\xd8\xd5\xdb\x1f\xa1\x14\xb5\xa0\x94\xef\x9a\x03\x1f\xe9\xb9\x3c\xe0\xd2\x8c\x23\xa3\x14\xab\xb4\x2d\xa6\xf0\x23\x42\x2f\xb4\xfb\xcb\xa7\xbb\x0c\xba\x50\xfa\xb1\xad\xd8\x0f\x77\x9f\xe6\x88\xc6\xfb\xdd\x83\x4f\x27\x2f\xce\x96\x5f\xc7\xbe\xfe\xe3\x16\x5f\x2c\xeb\x88\x51\xcd\xe2\x7a\x32\xd1\xd4\x0d\xd3\x1c\xa4\x9d\x97\xa1\x20\xf6\x4e\xa2\xe9\xfb\xee\x3e\xbd\xb9\x13\xc5\xe9\xba\xed\x7e\x3a\x79\xf1\xfe\xf0\xd3\x40\x54\xe7\xb3\x2d\xa8\x8b\x58\xff\x34\xd0\x9e\x27\x87\x75\xee\x61\x59\xda\xfc\xd9\x3f\xfe\x17\x00\x00\xff\xff\x01\xe9\x17\x91\x4f\x0d\x00\x00")

func testimonialsJsonBytes() ([]byte, error) {
	return bindataRead(
		_testimonialsJson,
		"testimonials.json",
	)
}

func testimonialsJson() (*asset, error) {
	bytes, err := testimonialsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testimonials.json", size: 3407, mode: os.FileMode(420), modTime: time.Unix(1579817821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clouds.json":       cloudsJson,
	"customers.json":    customersJson,
	"press.json":        pressJson,
	"testimonials.json": testimonialsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clouds.json":       {cloudsJson, map[string]*bintree{}},
	"customers.json":    {customersJson, map[string]*bintree{}},
	"press.json":        {pressJson, map[string]*bintree{}},
	"testimonials.json": {testimonialsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
