// Package data Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// clouds.json
// customers.json
// press.json
// testimonials.json
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd3\xb1\x6a\xc3\x30\x10\x06\xe0\x3d\x4f\x71\x78\x0e\xf1\x9e\x2d\x6d\xa1\x4b\x4b\x0a\x19\x3a\x2b\xe7\xab\x6a\x2c\xeb\x84\xa4\x34\x34\x25\xef\x5e\x24\x05\xa7\x95\x34\x6a\x0b\xa7\xcb\xff\x7f\x18\xee\x67\x05\xd0\x89\xb3\xeb\xb6\x10\x7e\x02\x74\x13\x7d\x77\xdb\x34\x5b\xa7\x89\x62\xc9\xcb\x3b\x40\xe7\x2c\x86\x8d\x4f\xef\x8d\xdb\xf6\x3d\x0e\x7a\x23\x8c\x71\xc8\x03\x6d\x90\xe7\x7e\x9c\x85\x24\xd7\xa3\xe2\xd3\xe0\x7a\x71\x76\x1b\xa3\xe5\x2d\x2c\xb4\x29\x1f\xfe\xbe\x9b\xc5\x85\x35\xbc\xd3\x11\x0e\x64\xbf\x46\x24\xd7\xc5\x95\xeb\x0a\xe0\xba\x8e\xae\xcb\xc9\x52\x29\x8b\xd3\x36\xb6\x10\x55\xd5\xbd\x8e\x68\xd9\xf1\x87\x87\x5d\xac\xcb\x64\x12\x4b\x57\x98\x35\x51\x49\x34\x55\xd3\x33\xb3\x54\x04\x8f\x61\x2b\x07\x0d\xa3\x1c\xbd\x50\x8c\x24\x74\x21\xfb\xf7\xd8\x84\xf8\x37\xb1\x6a\x7d\x4a\x0b\xfb\x58\x99\x59\xd5\xa8\x79\x28\xbf\xdf\x6d\xdc\xc4\x97\xb2\xaa\xb2\x97\x54\x93\x99\xd8\x90\x76\x5e\xe0\x54\xb0\xee\x2f\x4d\x64\x4b\x5c\x15\xb7\x37\xa4\x0f\xb1\x2c\xf3\x19\x81\x13\xf9\x02\x77\x1b\x37\x91\xa5\xac\x2a\xeb\x2d\xd5\x64\xa6\xa3\xb0\x34\x93\x17\xaa\x60\xdd\x5f\x9a\xc8\x96\xb8\x2a\xee\x61\x29\xcb\x6f\x82\x71\x22\x5b\x5e\x43\x1a\xb7\xb9\x83\x98\x55\xbf\x80\x54\x73\x37\xad\xae\xbf\x01\x00\x00\xff\xff\x80\x8b\x61\x4c\x6d\x05\x00\x00")

func cloudsJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudsJson,
		"clouds.json",
	)
}

func cloudsJson() (*asset, error) {
	bytes, err := cloudsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clouds.json", size: 1389, mode: os.FileMode(420), modTime: time.Unix(1567469222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _customersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\xea\xa3\x30\x10\x87\xef\x7d\x8a\xe0\x79\x6b\xee\xde\x5a\xba\xec\x16\x3c\x14\xf7\xb6\x97\x25\xea\x54\x03\x31\x09\xc9\xa8\x74\x97\xbe\xfb\x92\xd4\x50\x41\x6b\xfd\xd7\x93\x90\xdf\xcc\xe7\x37\x03\xf3\x6f\x47\x48\xc4\x25\x82\xb1\x37\x8b\xd0\xd8\x28\x21\xee\x8d\x90\x48\xb2\x06\xa2\x84\x44\x67\x97\xfe\x1a\xd2\x6f\x8f\xac\x87\xdc\x72\xf4\x71\x8d\xa8\x6d\x42\x69\xdf\xf7\xf1\x18\x14\x17\xaa\x09\xe5\x42\x55\x6a\x5c\x5b\x94\x32\x66\x5a\xdb\x42\x95\xe0\xea\x28\x6f\x58\x05\x96\x16\xad\x45\xd5\x80\xb1\x74\x4c\xa2\xae\x3d\xd6\xb2\x0a\x38\x5b\xab\x3e\x4a\x08\x9a\x16\x76\x84\xdc\xdd\x6b\x04\x42\xd7\x60\x38\x9b\xfa\x7f\x0f\xc9\xb2\x7b\x00\x6c\xf3\x0e\x94\x55\xce\x7f\x21\x37\x33\xc2\xbf\xfd\xf3\xb2\xad\x6f\xdd\xa6\xea\x11\xab\x3c\xb5\xe1\x05\xd4\x6d\x9e\x0b\x98\xda\x5e\x5c\xf8\xd3\x87\xe4\xf0\x63\x41\x7b\x44\xd9\x26\x3e\x02\x3d\xf4\x6d\xb7\xa8\x6f\x5a\x59\xf5\xec\x36\x55\xcf\x86\xe0\xb5\xf3\xd0\xba\xcd\x77\x80\xac\x5a\x75\x09\x9d\x12\x2d\x72\x25\x67\x2e\xf1\xf4\x0c\x63\x09\xb8\xe0\x5d\xce\x57\x7e\xdd\x7d\x04\xa2\xa3\xdf\x1f\x45\x0b\xfb\x34\x9b\x99\xe6\xca\x84\x7d\x8e\x23\x78\x07\x86\x35\x7a\x3a\x4b\xca\x3b\xc8\x5c\xf2\x7a\x88\xd0\xbc\x6d\xfb\x81\xb2\x6a\xfd\x39\x37\x25\x9f\xca\x1e\xcf\xd9\xe9\x4c\x2e\x78\x23\x29\x96\x6f\x2e\xd3\x23\x9c\x4a\xcc\xda\xcf\xad\x3d\x85\xfa\xff\xee\x53\x55\xa9\x3f\x19\x20\x97\xec\x9d\x3f\xb3\xc8\x0c\xce\x5c\xe9\x61\x08\xe6\xdd\x13\x4a\x87\xce\xbd\x16\x0c\xaf\xca\x34\xb1\x32\xd5\xe7\xfa\x03\x2d\x7c\x17\xb4\x77\xf7\xff\x01\x00\x00\xff\xff\xd8\x50\x11\x81\x83\x06\x00\x00")

func customersJsonBytes() ([]byte, error) {
	return bindataRead(
		_customersJson,
		"customers.json",
	)
}

func customersJson() (*asset, error) {
	bytes, err := customersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "customers.json", size: 1667, mode: os.FileMode(420), modTime: time.Unix(1569861437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pressJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4f\x6f\x1b\x47\x0c\xc5\xef\xfe\x14\x84\xcf\xfa\xd3\xd8\x69\x8d\x06\x28\x8a\x56\x4e\x90\x20\x85\x5b\xb8\x2e\x8c\xa2\xe8\x81\x9a\xa1\xb4\x53\xcd\x0c\x07\x24\x57\x5b\xa1\xc8\x77\x2f\xb8\x6b\x39\x42\x61\x07\x39\xa4\x47\x69\x67\xc8\x37\xef\xfd\xc8\x3f\xce\x00\xfe\x39\x03\x00\x38\xb7\x64\x99\xce\x5f\xc1\xf9\x25\x70\xa3\x0a\xca\xbd\x04\x82\x26\xfc\x17\x05\x53\xb0\x0e\x0d\x0a\xee\x08\xde\xf7\x6b\x92\x4a\x46\x0a\x84\x9a\x48\xce\x67\x53\x09\xed\x4b\x41\x39\x78\x91\x37\xc2\x05\x42\xee\xd5\x48\x40\x0d\x8d\xa0\x60\xc5\x2d\x15\xaa\x06\xc6\xa0\x15\x9b\x76\x6c\x0a\x58\x23\x5c\xdf\xce\x20\x70\x69\x58\x13\x57\x30\xe6\xac\xb0\xf1\x12\x6f\xa9\x59\xe2\xd9\xd8\x33\xce\xc6\xb3\xef\xfb\x75\x0a\x2c\x15\x30\x15\xaf\xb4\x49\x39\x83\x75\x04\x5b\x6c\x0a\xa9\x9e\xe8\x5b\x1c\x95\xe5\x54\x77\x2e\xab\x33\x6b\xfa\x6a\xb9\x1c\x86\x61\x91\xea\x86\x07\x96\x1c\x17\x81\xcb\x12\xc5\x52\xc8\xb4\xbc\xbc\x78\xf1\xf2\x9b\x8b\xab\xe5\xe5\xdc\x5d\x98\x4f\x2e\xcc\x8f\x2e\xcc\xdd\x85\xb9\xbb\x30\xdf\x3d\x76\x99\x4f\x2e\x2c\x3a\x2b\xf9\xd8\xd0\x52\xa1\x3b\xbe\x25\x8c\xde\xf6\x6b\x28\xa9\xaa\x8b\x1d\xff\x79\x38\x93\x0a\x6e\xdd\xf1\x29\x00\xf7\x4f\xc2\xa9\xc8\x10\xeb\x02\x5b\xd3\xc0\x91\x46\x8d\xe3\x05\x5d\x36\x21\xd5\xe5\x8b\x45\xab\xdb\xf3\xf1\xea\x87\x33\x80\x0f\xb3\x27\xa2\xbc\xed\x6b\x4d\x75\x0b\xbf\x73\x2f\x70\x8d\x86\x6b\x54\x82\x9f\x4f\x2d\x82\xfb\x64\xdd\xf8\xfb\xfa\xc7\x27\x72\x3c\x39\x98\x14\x10\xa2\xa4\xbd\x57\xdc\xb0\xc3\x91\xea\x68\xbc\x50\xc5\xa4\x8a\x35\x10\xa0\x70\x5f\x23\x44\x6a\x99\x0f\x7e\xd2\x23\x93\x07\x1d\xd8\x5a\x4e\x01\x2d\x71\xd5\x05\xbc\xe5\x81\xf6\x24\xb3\x89\x0c\xff\xee\xc5\xe2\x51\x66\xc6\x03\x89\x77\x55\xf3\x84\x11\x94\x1a\x8a\x93\x14\xb8\x06\x92\xba\x80\xbb\x8e\x1e\xa4\x1f\x39\x85\x01\x15\x82\x10\x1a\x45\x40\x57\x3c\xe0\x01\x78\xe3\xdf\xf7\x29\x8e\x22\x40\x53\x69\x99\xa0\x50\xe8\xb0\x26\x2d\xfe\x9a\x47\x8d\x07\xf7\x4a\x8d\x05\xb7\x04\x7a\x50\xa3\x72\x7c\xa7\x62\x21\x68\x19\x6d\xc3\x52\xbc\xfa\x78\xf6\xe4\x51\x9f\xe4\xcd\x1f\x46\x75\x9b\x2a\x91\xa4\xba\x6d\x1c\x03\xaa\x8d\xc1\x3a\x4b\x71\x7d\x8a\xd4\xd1\x85\x39\xb5\xa4\x1c\x69\x7e\xf5\xed\xf2\x19\xb6\xbe\x7a\x84\xeb\xa7\xa4\x46\xf5\xcb\xe0\x75\xf1\x19\x78\xad\x6e\x56\x6f\xe0\x75\xd5\x5e\x48\x4f\x91\x7a\x57\x8d\xc4\xe7\x47\x70\x9d\x72\xb2\x03\x0c\x0e\x19\xc2\x8a\xc4\xe0\x17\xe1\xad\x60\x79\x02\x36\x8f\x73\x95\xb9\x8f\x70\x83\x96\xf6\x04\x2b\x2e\xad\x37\x4f\xe5\x8d\x53\x35\x7a\x0c\x1d\xfa\x94\x9b\x70\xec\x03\xc5\x31\x98\x4a\x03\x04\x12\x4b\x9b\x87\x20\x3c\x6e\x6f\xe2\xae\x74\x94\x1b\xd0\xa8\x12\xc2\x58\x7d\x62\x81\x64\xda\x3d\x6c\x9d\xef\x28\x92\x7d\x0a\xa4\xb0\xa7\x1a\x59\x14\x84\x0a\xa6\x3a\x6d\x25\x4b\xeb\x4c\xd3\x23\xb8\x12\x60\x9d\xee\xa0\x8e\xdd\x1b\xb7\x3e\xa3\x38\x96\x86\xa9\x92\x00\x4b\xe8\x48\x4d\x1e\xb5\x8c\x68\x1a\xee\x48\xa1\xe3\x1c\x1d\x48\xbf\x99\x6a\xec\xd5\xe4\xf0\x2c\x37\xd6\x51\xa5\x41\x0d\xc3\x6e\x91\x78\x19\x6a\xd8\xcc\x1f\xdf\xae\xf3\xf0\x1c\x13\xff\xc3\xbe\xb9\xfc\x0c\x20\x4e\x18\x38\x99\x0a\x68\x18\x76\xd3\x80\x8f\x3b\x7d\x93\x44\x0d\x9a\xa4\x1a\x52\xcb\xa4\x4f\x90\xf0\x96\x72\xf1\xd1\x77\x93\x0a\xfb\xe9\x07\x8f\x7d\x9a\x7d\x5a\x3f\x96\x3c\xdd\x29\xe3\xa7\x93\xf5\x0f\xef\x7c\x70\xbd\x0e\xe6\xdd\x0c\xee\xb0\x60\x86\x5f\xb1\xc3\xd9\x04\x94\x47\xb5\x81\x1f\x5a\xd3\x15\x47\x02\xfa\xbb\x65\x96\x31\xa3\x01\x46\x09\x17\x10\xb0\xc2\x9a\xa6\x95\x91\x36\x89\xe2\x27\x67\xfc\xc0\xbd\xf5\xeb\xc9\xbd\x01\x2d\x74\xdf\xef\xbf\xbb\xba\xb9\xfe\xed\xea\xfd\xee\x9e\xf3\xeb\xa7\xd3\x7a\xf1\x71\x82\xef\xfd\xce\x97\xc9\xeb\xe5\x7f\xf2\x3a\xfb\xf3\xec\xdf\x00\x00\x00\xff\xff\x47\x51\x88\xb1\xee\x07\x00\x00")

func pressJsonBytes() ([]byte, error) {
	return bindataRead(
		_pressJson,
		"press.json",
	)
}

func pressJson() (*asset, error) {
	bytes, err := pressJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "press.json", size: 2030, mode: os.FileMode(420), modTime: time.Unix(1567469222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testimonialsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xc1\x6e\xdc\xc8\x11\xbd\xfb\x2b\x2a\x3a\xc4\x09\x30\xe2\x5c\x02\x04\x58\x6c\x0c\x08\x96\xd7\x36\xac\x5d\x0b\x56\x10\x1f\xe2\x40\x28\x76\xd7\x90\x2d\x35\xbb\x1a\x55\xcd\xe1\x52\x41\xfe\x27\x97\x9c\xf2\x09\xfe\xb1\xa0\x9a\x43\x69\xa0\x5d\xed\xc1\x81\x2e\xc6\x98\x4d\x56\xbf\xaa\xf7\xea\x55\xe9\xef\x2f\x00\xfe\xf9\x02\x00\xe0\x24\xe1\x40\x27\xdf\xc1\xc9\xc5\xe8\x10\x3e\xe1\x1e\xef\xee\x38\xf2\xc9\x66\x39\xbd\xe1\xd6\x0e\x2f\x85\xfd\xe8\x0a\xfc\x88\x09\x3b\x92\xf5\x94\x06\x0c\xd1\xce\xd7\x07\x59\x78\x17\x62\x8d\xd7\x97\x92\xf5\xbb\xed\xd6\xf9\xd4\x60\xce\xea\xd8\x53\xe3\x78\xd8\x86\x01\x3b\xd2\xad\x1b\xb5\xf0\x40\xa2\xdb\x4c\xa2\x9c\x74\x1b\x47\x87\xd7\xb2\x22\x68\x72\xea\xd6\xb0\x8e\x87\x8c\x69\xfe\x40\xb3\x45\x0e\xa9\x90\xe8\xac\x85\x06\x3d\xba\xd8\x00\x1e\xde\x70\x9c\x74\x8c\x25\x3c\x44\x28\xa4\x25\x0c\x9c\x02\x56\xbc\xef\x2d\xc4\xd5\x12\x02\x26\x54\xf0\x14\x43\xd7\x17\xf2\x50\x18\x28\x75\xd8\x11\x4c\xa1\xf4\x70\x96\xb3\xbe\x66\x4f\x10\x12\x94\x9e\xea\x8b\x0e\x0b\x6d\x60\xa6\x02\xbb\x31\x79\x1c\x28\x15\x8c\x50\x50\x6f\x81\x77\xa0\x63\xce\x2c\x76\x39\xf8\x51\xb0\x8d\xb4\x81\xc4\xe9\x94\x72\x4f\x03\x09\x46\x98\x58\x6e\x23\xa3\xd7\xe5\x8a\x0f\x63\x4b\x92\xa8\x90\x36\xf0\x99\x20\x11\x79\xc3\xd1\x13\xb4\xa4\xe5\x34\x0b\x65\x14\xf2\x1b\x18\xb8\xfe\x97\x77\xc1\x05\x4a\x05\x3c\x16\x6c\x51\x09\x38\x93\x60\x61\x81\x87\xc4\x57\xbc\x21\xf9\x51\x8b\xcc\x0d\xbc\x0d\x7b\x4a\xf7\xf9\xbc\x54\xc8\xe4\x43\x27\x44\x06\xfa\x3e\x54\x3b\x86\xe8\xed\xfb\x35\xa6\x6e\x0e\x79\xbb\xa0\x81\x53\xad\x16\xa1\xce\x0d\xfc\xc4\x50\xc2\x40\xf5\xc9\x84\x6a\xc5\xc3\xe4\x01\x63\x04\x6e\x6f\xc8\x95\xb0\x27\x05\x21\x74\x3d\x79\xc3\x83\x09\x70\xc0\xbb\x90\xba\x38\x83\xf6\x2c\x05\x32\x49\x60\x6f\x08\x2c\x54\x03\xef\x61\xe2\x31\x7a\x10\x72\x3c\x0c\x94\xfc\x03\x01\x47\xb9\xed\x58\x00\xd3\x7c\x54\x39\x10\x8a\x68\x08\xac\xb6\xcd\xc9\x0b\x80\x7f\x6d\x7e\xa9\xf1\x1f\x51\x02\xc3\x07\xbe\xbb\xc1\xdb\x47\x0a\xbf\xe2\x38\x96\xc0\x49\xe1\x4c\x5c\x1f\x0a\xb9\xf2\x3c\x2a\x1f\x0c\xc3\xf5\x6d\xc5\xd0\xdc\xe4\x27\x34\x4e\x31\xf7\x24\x01\x7f\x5d\xdf\x7b\x9e\x8f\xdb\xf0\x91\xb8\xff\xb6\x9c\xc2\x80\x26\xdb\x02\x1a\x86\x1c\xa9\x72\x43\xbb\x55\x3b\x56\xc2\x51\x4d\xed\x59\xd8\xb2\xad\xe7\x21\x85\x12\xb0\x10\xf0\x28\xd0\xa2\x10\x0c\x64\xda\x3e\x2a\xf4\x2a\xde\x06\xde\x17\x85\x31\x79\x92\x38\x1b\x29\x85\x5c\x9f\x38\x72\x37\x2f\x57\xfd\x5c\x28\x69\xd8\x13\x5c\xfc\x69\xed\x09\xc0\xc8\xa9\x5b\x54\xaf\x84\x43\x24\x55\xb8\xba\xba\x00\x6b\xe9\x4e\xd0\x08\x80\xa0\x30\xf5\x58\x16\xf8\xa3\x82\xeb\x99\x95\x60\xcd\x8a\xf7\xf6\x4f\xe9\x49\xb4\xb9\x7f\x58\x08\x07\xfb\x10\xa3\x32\xec\x49\x66\x10\xd2\xcc\xcb\xfd\x53\x4f\xc9\xea\xe0\x78\xa0\x9a\xf1\x01\x4d\x03\x6f\x85\xb0\xc0\xa1\xb6\xbf\x7b\x5a\x35\x69\xa4\x08\x9f\x70\xf8\xfa\x1f\xa1\x3b\xb8\xf8\xfa\xdf\x4c\x77\x8f\xf4\x73\x4e\xfb\x8f\x59\xe1\x4d\xea\x42\xa2\xe7\x72\xc8\xa1\x22\xb9\x96\x03\x92\xeb\x58\x91\x34\x37\x99\x9e\x90\x51\x96\xe0\xa8\x1f\xdb\x36\xd2\xff\xa3\xa4\xa0\xd5\x03\x08\x35\x90\x16\x98\x70\xb6\x32\x8e\x4a\xf5\xf1\x0e\x75\x51\x8f\x50\x0c\xe6\x77\xf0\xee\xec\x52\xf8\xe7\x19\x50\xab\x90\x42\xea\xc4\x98\x76\x9c\x8a\x70\x8c\x24\x0d\x9c\x15\xb8\x34\x70\xef\x2a\xb8\x8d\xf1\x73\xb8\xc5\xb1\x24\x92\x53\x2d\x9c\xaa\x35\x55\x29\xc6\x91\xb6\xe6\x55\x09\x3c\xe5\xc8\xb3\x79\xae\x3e\xd9\xe7\x9f\x82\xeb\x49\xe0\x02\x25\xec\xc3\xd7\x7f\x0b\xfd\x0a\x59\x97\x57\x70\x95\xc9\x05\x8c\x41\x9f\xa9\xd5\xa5\xc2\xb8\x8e\xf7\x30\x7e\x83\x29\x4f\xfb\xd5\x81\xbe\x85\xa9\xf7\xb5\x2f\x97\xce\x42\xd8\xd1\x74\xdc\xb2\x2e\x8e\x6a\x23\xb3\x92\x34\x51\x25\x6e\xa5\xf6\x40\x51\x16\xda\x91\x48\xf5\xe9\x5f\x92\xf5\x99\xcc\xc6\x63\x9c\x21\x86\x5b\x5a\xb5\x50\xd9\x71\x9c\x76\xa1\x1b\x97\xde\x6d\xe0\x9c\xdd\x58\xe7\xe1\xda\xca\x59\xa8\x94\x19\x3a\x66\xdf\xc0\x99\xb5\xa7\x7d\x3d\x2e\x1f\xbf\xc3\x45\x27\x41\x21\x0c\xd6\x92\xf8\xe0\x4c\x2d\x39\xb4\xd7\x42\xa9\xa9\xe9\x8a\x60\xa2\x18\x97\x3c\x5b\x2e\xbd\x99\x8b\x65\x75\xf1\x67\x30\x53\x82\x16\x23\x26\x17\x52\xd7\xc0\xc7\x07\xf9\xfc\xf5\xf5\x25\x28\xc9\x3e\x38\xd2\x0d\x7c\xc6\xf9\x16\x7e\xe2\x69\x53\x1d\xc3\xf4\x5a\xb8\x46\xd4\x62\xa1\x4a\xcf\xa3\x62\xf2\x6a\x5f\x1b\x95\x41\x8b\x39\xa6\xe3\x94\x6c\xa8\xd9\x8c\xa8\x16\xa3\x03\x73\xe9\xe3\x0c\x58\x6a\x52\x8a\x03\x2d\x63\xec\x29\x5d\x9e\x63\x0a\x14\xe1\x2d\xcb\x10\xe7\xc7\x03\x88\x52\x60\x81\x73\xda\x53\xb4\xd9\xfb\x3c\x92\xf4\x15\xc1\x75\x57\x11\x3c\xbd\x62\xb5\x41\x7c\xf8\x16\x1d\x3e\x52\xca\xa8\x36\x19\x0e\x5a\x5b\x26\x86\x16\x41\x5b\xb5\x76\x2c\x13\x8a\x3f\x68\x32\xc6\x53\x7f\x90\x0e\xf9\x83\xa8\xea\x91\x4d\x87\x3f\x90\x2e\x9d\x1a\x67\xb8\xa0\xf2\xd2\x6c\xd6\xc9\x9c\xcb\x1f\xa1\x47\x5d\x06\x85\xd1\x3c\x84\x75\x86\xd8\x1a\x76\xe0\xdb\xc8\x3d\xea\x05\x84\x56\x88\xee\xa8\x81\x37\xe8\x7a\x18\xf0\x86\xc5\xe8\xac\xbb\x8d\x45\x6b\xcd\x64\x70\x61\x78\xa2\x68\x43\x03\xc6\xec\xb1\xd0\x93\x03\xe2\xbc\xae\x15\x3f\x08\xf9\x87\xa2\x1d\x58\xfd\x81\xeb\x84\x84\xdf\xc3\xeb\x37\x1f\x9f\x8b\x52\x5b\x28\x76\xf5\xf6\xdf\x30\x18\xd4\x82\x52\xbe\x69\x0c\x7c\xa6\x97\xf2\x88\x4b\xf3\x8d\x8c\x52\xac\xd2\xb6\x96\xc2\xf7\x08\xbd\xd0\xee\x2f\x5f\xee\x33\xe8\x42\xe9\xc7\xb6\x62\x3f\xdc\x7d\x9a\x23\x1a\xef\xf7\x0f\xbe\x9c\xbc\x3a\x5b\x7e\x1d\xdb\xfa\xf7\x5b\x7c\xb5\x6c\x23\x46\x35\x8b\xeb\xc9\x44\x53\xf7\x4b\x33\x90\x76\x5e\x66\x82\xd8\x3b\x89\xa6\x6f\xbb\xfb\xf4\xf6\x5e\x14\xa7\xeb\xae\xfb\xe5\xe4\xd5\xc7\xc3\x4f\x03\x51\x8d\xcf\x96\xa0\x2e\x62\xfd\xc3\x40\x7b\x9e\x1c\xd6\xb1\x87\x65\xe9\xf2\x17\xff\xf8\x5f\x00\x00\x00\xff\xff\x43\x85\x3f\x49\x4c\x0d\x00\x00")

func testimonialsJsonBytes() ([]byte, error) {
	return bindataRead(
		_testimonialsJson,
		"testimonials.json",
	)
}

func testimonialsJson() (*asset, error) {
	bytes, err := testimonialsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testimonials.json", size: 3404, mode: os.FileMode(420), modTime: time.Unix(1569861271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clouds.json":       cloudsJson,
	"customers.json":    customersJson,
	"press.json":        pressJson,
	"testimonials.json": testimonialsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clouds.json":       {cloudsJson, map[string]*bintree{}},
	"customers.json":    {customersJson, map[string]*bintree{}},
	"press.json":        {pressJson, map[string]*bintree{}},
	"testimonials.json": {testimonialsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
