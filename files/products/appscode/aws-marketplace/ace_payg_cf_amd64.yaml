AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for AppsCode Cloud (ACE)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - InstanceType
          - ApplicationAccessIpCIDR
          - SSHIpCIDR
          - KeyPair
      -
        Label:
          default: "Application Configuration"
        Parameters:
          - DomainWhiteList

Parameters:
  InstanceType:
    Description: "Choose your EC2 instance type to be deployed."
    Type: String
    Default: "m5.xlarge"
    AllowedValues:
      - "m5.xlarge"
      - "m5.2xlarge"
      - "m5.4xlarge"
      - "m5.8xlarge"
      - "m5.12xlarge"
      - "m5.16xlarge"
      - "m5.24xlarge"
      - "m5d.xlarge"
      - "m5d.2xlarge"
      - "m5d.4xlarge"
      - "m5d.8xlarge"
      - "m5d.12xlarge"
      - "m5d.16xlarge"
      - "m5d.24xlarge"
  SSHIpCIDR:
    Description: "CIDR range of remote ip for ssh for debug or management purposes. Please set CIDR to x.x.x.x/32 to allow one specific IP address access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range."
    Type: String
    AllowedPattern: '^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\/(3[0-2]|[1-2]?[0-9])$'
  ApplicationAccessIpCIDR:
    Description: "CIDR range from where the application will be accessed. 0.0.0.0/0 is recommended to allow all IP addresses access. Set CIDR to x.x.x.x/32 to allow one specific IP address access or another CIDR range as needed."
    Type: String
    AllowedPattern: '^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\/(3[0-2]|[1-2]?[0-9])$'
  KeyPair:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance."
    Type: 'AWS::EC2::KeyPair::KeyName'
  DomainWhiteList:
    Description: "Provide a valid and existing domain with an MX record for domain whitelisting. This domain will be used to validate users' email addresses during signup. For example: gmail.com, appscode.com etc."
    Type: String
    AllowedPattern: '^(?!:\/\/)([a-zA-Z0-9-]{1,63}\.)+[a-zA-Z]{2,63}$'

Mappings:
  InstanceMap:
    af-south-1:
      AMI: ami-0cc55f31911004db3
    ap-east-1:
      AMI: ami-0d481230a0ff04aca
    ap-northeast-1:
      AMI: ami-0037237888be2fe22
    ap-northeast-2:
      AMI: ami-04cb1684c278156a3
    ap-northeast-3:
      AMI: ami-071d6b6bbb231289b
    ap-south-1:
      AMI: ami-0327f51db613d7bd2
    ap-south-2:
      AMI: ami-064cf6726d1a658cc
    ap-southeast-1:
      AMI: ami-0c45ac6ebf9cf6245
    ap-southeast-2:
      AMI: ami-0dbd9c83830eecdb7
    ap-southeast-3:
      AMI: ami-0570a44582da09d2d
    ap-southeast-4:
      AMI: ami-02de922d10ec99123
    ap-southeast-5:
      AMI: ami-08446abe47bd9ddad
    ca-central-1:
      AMI: ami-0f0f9d42fd1e4ac96
    ca-west-1:
      AMI: ami-0eb99016aaf103a17
    eu-central-1:
      AMI: ami-00d72ec36cdfc8a0a
    eu-central-2:
      AMI: ami-0d15f5c4c0395dd6f
    eu-north-1:
      AMI: ami-02a0945ba27a488b7
    eu-south-1:
      AMI: ami-0a4bc0bc4811cd26b
    eu-south-2:
      AMI: ami-04bc8ce11d5065e6e
    eu-west-1:
      AMI: ami-04bd4a6a67aa8e86e
    eu-west-2:
      AMI: ami-0abb41dc69b6b6704
    eu-west-3:
      AMI: ami-0f6c2b9008cea6bed
    il-central-1:
      AMI: ami-0455e2e06f5c85a84
    me-central-1:
      AMI: ami-07ecbf3436d97efff
    me-south-1:
      AMI: ami-04d783faf6c4f8f3e
    sa-east-1:
      AMI: ami-0a69ccdc44bdc8622
    us-east-1:
      AMI: ami-0166fe664262f664c
    us-east-2:
      AMI: ami-088d38b423bff245f
    us-west-1:
      AMI: ami-018a1ea25ff5268f0
    us-west-2:
      AMI: ami-061dd8b45bc7deb3d
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.5.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.5.0.0/24
      AvailabilityZone: {
        "Fn::Select" : [
          0,
          {
            "Fn::GetAZs" : !Ref AWS::Region
          }
        ]
      }
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SecurityGroupIngress4222:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 4222
      ToPort: 4222
      CidrIp: !Ref ApplicationAccessIpCIDR
      GroupId: !GetAtt VPC.DefaultSecurityGroup
  SecurityGroupIngress80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref ApplicationAccessIpCIDR
      GroupId: !GetAtt VPC.DefaultSecurityGroup
  SecurityGroupIngress443:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref ApplicationAccessIpCIDR
      GroupId: !GetAtt VPC.DefaultSecurityGroup
  SecurityGroupIngress6443:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 6443
      ToPort: 6443
      CidrIp: !Ref ApplicationAccessIpCIDR
      GroupId: !GetAtt VPC.DefaultSecurityGroup
  SecurityGroupIngress22:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHIpCIDR
      GroupId: !GetAtt VPC.DefaultSecurityGroup
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # basic
                Action:
                  - 'aws-marketplace:MeterUsage' # billing
                  - 's3:*' # s3-bucket
                  - 's3-object-lambda:*'
                  - 'eks:DescribeNodegroup' #import cluster permission
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ec2:DescribeRegions'
                  - 'eks:DescribeCluster'
                  - 'eks:ListClusters'
                  - 'iam:CreateServiceLinkedRole' # iam limited access
                Resource: '*'
              - Effect: Allow # cluster create - eks full
                Action:
                  - 'eks:*'
                  - 'logs:PutRetentionPolicy'
                  - 'kms:CreateGrant'
                  - 'kms:DescribeKey'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                Resource:
                  - 'arn:aws:ssm:*::parameter/aws/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ssm:*:'
                      - !Ref 'AWS::AccountId'
                      - ':parameter/aws/*'
              - Effect: Allow # cluster create - iam limited
                Action:
                  - 'iam:CreateInstanceProfile'
                  - 'iam:DeleteInstanceProfile'
                  - 'iam:GetInstanceProfile'
                  - 'iam:RemoveRoleFromInstanceProfile'
                  - 'iam:GetRole'
                  - 'iam:CreateRole'
                  - 'iam:DeleteRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 'iam:UpdateAssumeRolePolicy'
                  - 'iam:AddRoleToInstanceProfile'
                  - 'iam:ListInstanceProfilesForRole'
                  - 'iam:PassRole'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:GetRolePolicy'
                  - 'iam:GetOpenIDConnectProvider'
                  - 'iam:CreateOpenIDConnectProvider'
                  - 'iam:DeleteOpenIDConnectProvider'
                  - 'iam:TagOpenIDConnectProvider'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:TagRole'
                  - 'iam:UntagRole'
                  - 'iam:GetPolicy'
                  - 'iam:CreatePolicy'
                  - 'iam:DeletePolicy'
                  - 'iam:ListPolicyVersions'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':instance-profile/*'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/*'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':policy/*'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':oidc-provider/*'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/*'
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:GetUser'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/*'
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':user/*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  MeterUsageInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceProfileRole
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [InstanceMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      Tags:
        - Key: "Name"
          Value:
            Ref: AWS::StackName
      IamInstanceProfile: !Ref MeterUsageInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId:
            Ref: "Subnet"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda #/dev/sta1 root volume for ubuntu, /dev/xvda for amzn-linux
          Ebs:
            VolumeSize: 100 # Specify the size of the root volume in GB
            VolumeType: gp3
      UserData:
        Fn::Base64:
          !Join
            - "\n"
            - - |
                #!/bin/bash
                sudo su
                HOME="/root"
                cd $HOME
                apt-get -y update
                apt upgrade -y
                set -xeo pipefail
                exec >/root/userdata.log 2>&1
              - !Sub 'PUBLIC_IP=${ElasticIP.PublicIp}'
              - !Sub 'REGION=${AWS::Region}'
              - !Sub 'DOMAIN_WHITELIST=${DomainWhiteList}'
              - |
                #constants (don't touch)
                BUCKET_NAME="ace"
                ADMIN_USER_NAME="admin"
                ADMIN_USER_PASSWORD=""
                timestamp() {
                  date +"%Y/%m/%d %T"
                }
                log() {
                  local type="$1"
                  local msg="$2"
                  local script_name=${0##*/}
                  echo "$(timestamp) [$script_name] [$type] $msg"
                }
                retry() {
                  local retries="$1"
                  shift
                  local count=0
                  local wait=5
                  until "$@"; do
                  exit="$?"
                  if [ $count -lt $retries ]; then
                    log "INFO" "Attempt $count/$retries. Command exited with exit_code: $exit. Retrying after $wait seconds..."
                    sleep $wait
                  else
                    log "INFO" "Command failed in all $retries attempts with exit_code: $exit. Stopping trying any further...."
                    return $exit
                  fi
                    count=$(($count + 1))
                  done
                  return 0
                }
                update_welcome_message() {
                  echo 'See "/etc/ace/credentials" to get ACE system admin credentials, use this credential to login into the system as admin' >> /etc/motd
                }
                generate_credentials() {
                  # Define character sets
                  LOWER=$(head /dev/urandom | tr -dc 'a-z' | head -c 4)
                  UPPER=$(head /dev/urandom | tr -dc 'A-Z' | head -c 3)
                  NUMBERS=$(head /dev/urandom | tr -dc '0-9' | head -c 3)
                  SPECIAL=$(head /dev/urandom | tr -dc '!@#$%^&*()_+-=[]{}|;:,.<>?' | head -c 4)
                  # Combine all sets
                  ALL="$LOWER$UPPER$NUMBERS$SPECIAL"
                  # Shuffle the combined characters
                  ADMIN_USER_PASSWORD=$(echo "$ALL" | fold -w1 | shuf | tr -d '\n')
                  mkdir /etc/ace
                  echo 'username: admin' >> /etc/ace/credentials
                  echo 'password: '$ADMIN_USER_PASSWORD >> /etc/ace/credentials
                }
                create_k3s() {
                  echo 'fs.inotify.max_user_instances=100000' | sudo tee -a /etc/sysctl.conf
                  echo 'fs.inotify.max_user_watches=100000' | sudo tee -a /etc/sysctl.conf
                  sudo sysctl -p
                  # Create k3s cluster
                  SERVER_IP=${PUBLIC_IP}
                  #selinux policy resolve. ref: https://github.com/k3s-io/k3s/issues/10411#issuecomment-2231879747
                  amazon-linux-extras enable selinux-ng; sudo yum install selinux-policy-targeted -y
                  cmd="curl -sfL https://get.k3s.io"
                  retry 5 $cmd | INSTALL_K3S_EXEC="--disable=traefik --disable=metrics-server" sh -s - --tls-san "$SERVER_IP"
                  echo 'alias k=kubectl' >> ${HOME}/.bashrc
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  # wait for 2 pods to become running
                  cmd="kubectl wait --for=condition=ready pods --all -A --timeout=5m"
                  retry 5 $cmd
                  # Install helm
                  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                }
                aws_cli() {
                  BUCKET_NAME=${BUCKET_NAME}$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
                  echo "s3 bucket name: "${BUCKET_NAME}
                  # install jq
                  yum install jq -y
                  # aws s3api create-bucket --bucket ${BUCKET_NAME} --region ${REGION} --object-ownership BucketOwnerEnforced
                  aws s3api create-bucket --bucket ${BUCKET_NAME} --region ${REGION}
                  ACCOUNT_ID=$(aws sts get-caller-identity | jq -r '.Account')
                  CLUSTER_ID=$(kubectl get ns kube-system -o=jsonpath='{.metadata.uid}')
                  UTC_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")
                  #call the webhook here
                  resp=$(curl -X POST https://appscode.com/marketplace/api/v1/marketplaces/aws/notification/resource \
                    -H "Content-Type: application/json" \
                    -d '{
                          "eventType": "BIND",
                          "eventTime": "'${UTC_TIME}'",
                          "bindingInfo": {
                            "marketplace": "Aws",
                            "accountId": "'${ACCOUNT_ID}'",
                            "clusterId": "'${CLUSTER_ID}'",
                            "adminUsername": "'${ADMIN_USER_NAME}'",
                            "adminPassword": "'${ADMIN_USER_PASSWORD}'",
                            "domainWhitelist": ["'${DOMAIN_WHITELIST}'"],
                            "options": {
                              "infra": {
                                "dns": {
                                  "provider": "none",
                                  "targetIPs": ["'${PUBLIC_IP}'"]
                                },
                                "cloudServices": {
                                  "objstore": {
                                    "auth": {
                                      "s3": {
                                        "AWS_ACCESS_KEY_ID": "'${AWS_ACCESS_KEY_ID}'",
                                        "AWS_SECRET_ACCESS_KEY": "'${AWS_SECRET_ACCESS_KEY}'"
                                      }
                                    },
                                    "bucket": "s3://'${BUCKET_NAME}'?s3ForcePathStyle=true",
                                    "endpoint": "s3.amazonaws.com",
                                    "prefix": "ace",
                                    "region": "'${REGION}'"
                                  },
                                  "provider": "s3"
                                },
                                "kubestash": {
                                  "backend": {
                                    "provider": "s3",
                                    "s3": {
                                      "bucket": "s3://'${BUCKET_NAME}'",
                                      "endpoint": "s3.amazonaws.com",
                                      "prefix": "ace",
                                      "region": "'${REGION}'"
                                    }
                                  },
                                  "retentionPolicy": "keep-1mo",
                                  "schedule": "0 */2 * * *",
                                  "storageSecret": {
                                    "create": true
                                  }
                                }
                              },
                              "initialSetup": {
                                "cluster": {
                                  "region": "'${REGION}'"
                                },
                                "subscription": {
                                  "aws": {
                                    "customer-identifier": "demo-customer-identifier"
                                  }
                                }
                              }
                            }
                          }
                        }')
                    link=$(echo ${resp} | jq -r '.link')
                    if [ ${link} == "null" ]; then   exit 1 ; fi
                    mkdir new
                    cd new
                    curl -L "${link}" -o "archive.tar.gz"
                    tar -xvzf archive.tar.gz
                
                    #soruce azure credential file from archive.tar.gz
                    source env.sh
                    cd ..
                }
                install_fluxcd() {
                  helm upgrade -i flux2 \
                  oci://ghcr.io/appscode-charts/flux2 \
                  --version ${FLUXCD_CHART_VERSION} \
                  --namespace flux-system --create-namespace \
                  --set helmController.create=true \
                  --set sourceController.create=true \
                  --set imageAutomationController.create=false \
                  --set imageReflectionController.create=false \
                  --set kustomizeController.create=true \
                  --set notificationController.create=true \
                  --set-string helmController.labels."ace\.appscode\.com/managed=true" \
                  --set-string sourceController.labels."ace\.appscode\.com/managed=true" \
                  --set-string kustomizeController.labels."ace\.appscode\.com/managed=true" \
                  --set-string notificationController.labels."ace\.appscode\.com/managed=true" \
                  --set cli.image=ghcr.io/appscode/flux-cli \
                  --wait --debug --burst-limit=10000
                }
                deploy_ace(){
                  helm upgrade -i ace-installer \
                  oci://ghcr.io/appscode-charts/ace-installer \
                  --version ${ACE_INSTALLER_CHART_VERSION} \
                  --namespace kubeops --create-namespace \
                  --values=./new/values.yaml \
                  --wait --debug --burst-limit=10000
                }
                init(){
                  generate_credentials
                  create_k3s
                  aws_cli
                  install_fluxcd
                  deploy_ace
                  update_welcome_message
                }
                init

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Instance
      EIP: !GetAtt ElasticIP.PublicIp

Outputs:
  SiteURL:
    Description: Click this URL to explore the site
    Value: !Join [ "", [ "https://", !GetAtt ElasticIP.PublicIp ] ]
  ApplicationCredentials:
    Description: System Admin credentials
    Value: For Admin credentials ssh into the EC2 instance, and see the /etc/ace/credentials
