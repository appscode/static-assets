apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    control-plane: controller-manager
  name: capi-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    control-plane: controller-manager
  name: capi-webhook-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: clusters.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    shortNames:
    - cl
    singular: cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster
            properties:
              clusterNetwork:
                description: Cluster network configuration
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster
            properties:
              apiEndpoints:
                description: APIEndpoints represents the endpoints to communicate
                  with the control plane.
                items:
                  description: APIEndpoint represents a reachable Kubernetes API endpoint.
                  properties:
                    host:
                      description: The hostname on which the API server is serving.
                      type: string
                    port:
                      description: The port on which the API server is serving.
                      type: integer
                  required:
                  - host
                  - port
                  type: object
                type: array
              controlPlaneInitialized:
                description: ControlPlaneInitialized defines if the control plane
                  has been initialized.
                type: boolean
              errorMessage:
                description: ErrorMessage indicates that there is a problem reconciling
                  the state, and will be set to a descriptive error message.
                type: string
              errorReason:
                description: ErrorReason indicates that there is a problem reconciling
                  the state, and will be set to a token value suitable for programmatic
                  interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster
            properties:
              clusterNetwork:
                description: Cluster network configuration.
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              controlPlaneRef:
                description: ControlPlaneRef is an optional reference to a provider-specific
                  resource that holds the details for provisioning the Control Plane
                  for a Cluster.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Cluster and all its associated objects.
                type: boolean
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster
            properties:
              controlPlaneInitialized:
                description: ControlPlaneInitialized defines if the control plane
                  has been initialized.
                type: boolean
              controlPlaneReady:
                description: ControlPlaneReady defines if the control plane is ready.
                type: boolean
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a slice of failure domain objects synced
                  from the infrastructure provider.
                type: object
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: machinedeployments.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineDeployment
    listKind: MachineDeploymentList
    plural: machinedeployments
    shortNames:
    - md
    singular: machinedeployment
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: MachineDeployment is the Schema for the machinedeployments API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineDeploymentSpec defines the desired state of MachineDeployment
            properties:
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  should be ready. Defaults to 0 (machine will be considered available
                  as soon as it is ready)
                format: int32
                type: integer
              paused:
                description: Indicates that the deployment is paused.
                type: boolean
              progressDeadlineSeconds:
                description: The maximum time in seconds for a deployment to make
                  progress before it is considered to be failed. The deployment controller
                  will continue to process failed deployments and a condition with
                  a ProgressDeadlineExceeded reason will be surfaced in the deployment
                  status. Note that progress will not be estimated during the time
                  a deployment is paused. Defaults to 600s.
                format: int32
                type: integer
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              revisionHistoryLimit:
                description: The number of old MachineSets to retain to allow rollback.
                  This is a pointer to distinguish between explicit zero and not specified.
                  Defaults to 1.
                format: int32
                type: integer
              selector:
                description: Label selector for machines. Existing MachineSets whose
                  machines are selected by this will be the ones affected by this
                  deployment. It must match the machine template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              strategy:
                description: The deployment strategy to use to replace existing machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Currently the only supported
                      strategy is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: 'Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces"
                        type: string
                      ownerReferences:
                        description: List of objects depended by this object. If ALL
                          objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller.
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                          data:
                            description: Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state.
                            type: string
                        type: object
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      metadata:
                        description: 'DEPRECATED: ObjectMeta has no function and isn''t
                          used anywhere.'
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          generateName:
                            description: "GenerateName is an optional prefix, used
                              by the server, to generate a unique name ONLY IF the
                              Name field has not been provided. If this field is used,
                              the name returned to the client will be different than
                              the name passed. This value will also be combined with
                              a unique suffix. The provided value has the same validation
                              rules as the Name field, and may be truncated by the
                              length of the suffix required to make the value unique
                              on the server. \n If this field is specified and the
                              generated name exists, the server will NOT return a
                              409 - instead, it will either return 201 Created or
                              500 with Reason ServerTimeout indicating a unique name
                              could not be found in the time allotted, and the client
                              should retry (optionally after the time indicated in
                              the Retry-After header). \n Applied only if Name is
                              not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                            type: string
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                          name:
                            description: 'Name must be unique within a namespace.
                              Is required when creating resources, although some resources
                              may allow a client to request the generation of an appropriate
                              name automatically. Name is primarily intended for creation
                              idempotence and configuration definition. Cannot be
                              updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                            type: string
                          namespace:
                            description: "Namespace defines the space within each
                              name must be unique. An empty namespace is equivalent
                              to the \"default\" namespace, but \"default\" is the
                              canonical representation. Not all objects are required
                              to be scoped to a namespace - the value of this field
                              for those objects will be empty. \n Must be a DNS_LABEL.
                              Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                            type: string
                          ownerReferences:
                            description: List of objects depended by this object.
                              If ALL objects in the list have been deleted, this object
                              will be garbage collected. If this object is managed
                              by a controller, then an entry in this list will point
                              to this controller, with the controller field set to
                              true. There cannot be more than one managing controller.
                            items:
                              description: OwnerReference contains enough information
                                to let you identify an owning object. An owning object
                                must be in the same namespace as the dependent, or
                                be cluster-scoped, so there is no namespace field.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                blockOwnerDeletion:
                                  description: If true, AND if the owner has the "foregroundDeletion"
                                    finalizer, then the owner cannot be deleted from
                                    the key-value store until this reference is removed.
                                    Defaults to false. To set this field, a user needs
                                    "delete" permission of the owner, otherwise 422
                                    (Unprocessable Entity) will be returned.
                                  type: boolean
                                controller:
                                  description: If true, this reference points to the
                                    managing controller.
                                  type: boolean
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                  type: string
                              required:
                              - apiVersion
                              - kind
                              - name
                              - uid
                              type: object
                            type: array
                        type: object
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - infrastructureRef
                    type: object
                type: object
            required:
            - selector
            - template
            type: object
          status:
            description: MachineDeploymentStatus defines the observed state of MachineDeployment
            properties:
              availableReplicas:
                description: Total number of available machines (ready for at least
                  minReadySeconds) targeted by this deployment.
                format: int32
                type: integer
              observedGeneration:
                description: The generation observed by the deployment controller.
                format: int64
                type: integer
              readyReplicas:
                description: Total number of ready machines targeted by this deployment.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  deployment (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  deployment. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet available or
                  machines that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  deployment that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: MachineDeployment status such as ScalingUp/ScalingDown/Running/Failed/Unknown
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Total number of non-terminated machines targeted by this deployment
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of available machines (ready for at least minReadySeconds)
      jsonPath: .status.availableReplicas
      name: Available
      type: integer
    - description: Total number of ready machines targeted by this deployment.
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: MachineDeployment is the Schema for the machinedeployments API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineDeploymentSpec defines the desired state of MachineDeployment
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  should be ready. Defaults to 0 (machine will be considered available
                  as soon as it is ready)
                format: int32
                type: integer
              paused:
                description: Indicates that the deployment is paused.
                type: boolean
              progressDeadlineSeconds:
                description: The maximum time in seconds for a deployment to make
                  progress before it is considered to be failed. The deployment controller
                  will continue to process failed deployments and a condition with
                  a ProgressDeadlineExceeded reason will be surfaced in the deployment
                  status. Note that progress will not be estimated during the time
                  a deployment is paused. Defaults to 600s.
                format: int32
                type: integer
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              revisionHistoryLimit:
                description: The number of old MachineSets to retain to allow rollback.
                  This is a pointer to distinguish between explicit zero and not specified.
                  Defaults to 1.
                format: int32
                type: integer
              selector:
                description: Label selector for machines. Existing MachineSets whose
                  machines are selected by this will be the ones affected by this
                  deployment. It must match the machine template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              strategy:
                description: The deployment strategy to use to replace existing machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Currently the only supported
                      strategy is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: 'Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces"
                        type: string
                      ownerReferences:
                        description: List of objects depended by this object. If ALL
                          objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller.
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: This field
                              has been deprecated in v1alpha3 and will be removed
                              in a future version. Switch to DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            - template
            type: object
          status:
            description: MachineDeploymentStatus defines the observed state of MachineDeployment
            properties:
              availableReplicas:
                description: Total number of available machines (ready for at least
                  minReadySeconds) targeted by this deployment.
                format: int32
                type: integer
              observedGeneration:
                description: The generation observed by the deployment controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of a MachineDeployment
                  (ScalingUp, ScalingDown, Running, Failed, or Unknown).
                type: string
              readyReplicas:
                description: Total number of ready machines targeted by this deployment.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  deployment (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  deployment. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet available or
                  machines that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  deployment that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: machinehealthchecks.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineHealthCheck
    listKind: MachineHealthCheckList
    plural: machinehealthchecks
    shortNames:
    - mhc
    - mhcs
    singular: machinehealthcheck
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Maximum number of unhealthy machines allowed
      jsonPath: .spec.maxUnhealthy
      name: MaxUnhealthy
      type: string
    - description: Number of machines currently monitored
      jsonPath: .status.expectedMachines
      name: ExpectedMachines
      type: integer
    - description: Current observed healthy machines
      jsonPath: .status.currentHealthy
      name: CurrentHealthy
      type: integer
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: MachineHealthCheck is the Schema for the machinehealthchecks
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of machine health check policy
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              maxUnhealthy:
                anyOf:
                - type: integer
                - type: string
                description: Any further remediation is only allowed if at most "MaxUnhealthy"
                  machines selected by "selector" are not healthy.
                x-kubernetes-int-or-string: true
              nodeStartupTimeout:
                description: Machines older than this duration without a node will
                  be considered to have failed and will be remediated.
                type: string
              selector:
                description: Label selector to match machines whose health will be
                  exercised
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              unhealthyConditions:
                description: UnhealthyConditions contains a list of the conditions
                  that determine whether a node is considered unhealthy.  The conditions
                  are combined in a logical OR, i.e. if any of the conditions is met,
                  the node is unhealthy.
                items:
                  description: UnhealthyCondition represents a Node condition type
                    and value with a timeout specified as a duration.  When the named
                    condition has been in the given status for at least the timeout
                    value, a node is considered unhealthy.
                  properties:
                    status:
                      minLength: 1
                      type: string
                    timeout:
                      type: string
                    type:
                      minLength: 1
                      type: string
                  required:
                  - status
                  - timeout
                  - type
                  type: object
                minItems: 1
                type: array
            required:
            - clusterName
            - selector
            - unhealthyConditions
            type: object
          status:
            description: Most recently observed status of MachineHealthCheck resource
            properties:
              currentHealthy:
                description: total number of healthy machines counted by this machine
                  health check
                format: int32
                minimum: 0
                type: integer
              expectedMachines:
                description: total number of machines counted by this machine health
                  check
                format: int32
                minimum: 0
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: machinepools.exp.cluster.x-k8s.io
spec:
  group: exp.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachinePool
    listKind: MachinePoolList
    plural: machinepools
    shortNames:
    - mp
    singular: machinepool
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: MachinePool status such as Terminating/Pending/Provisioning/Running/Failed
        etc
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: MachinePool is the Schema for the machinepools API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachinePoolSpec defines the desired state of MachinePool
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  instances should be ready. Defaults to 0 (machine instance will
                  be considered available as soon as it is ready)
                format: int32
                type: integer
              providerIDList:
                description: ProviderIDList are the identification IDs of machine
                  instances provided by the provider. This field must match the provider
                  IDs as seen on the node objects corresponding to a machine pool's
                  machine instances.
                items:
                  type: string
                type: array
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              strategy:
                description: The deployment strategy to use to replace existing machine
                  instances with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Currently the only supported
                      strategy is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: 'Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces"
                        type: string
                      ownerReferences:
                        description: List of objects depended by this object. If ALL
                          objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller.
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: This field
                              has been deprecated in v1alpha3 and will be removed
                              in a future version. Switch to DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - template
            type: object
          status:
            description: MachinePoolStatus defines the observed state of MachinePool
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachinePool.
                format: int32
                type: integer
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              failureMessage:
                description: FailureMessage indicates that there is a problem reconciling
                  the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a problem reconciling
                  the state, and will be set to a token value suitable for programmatic
                  interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              nodeRefs:
                description: NodeRefs will point to the corresponding Nodes if it
                  they exist.
                items:
                  description: ObjectReference contains enough information to let
                    you inspect or modify the referred object.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                type: array
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              readyReplicas:
                description: The number of ready replicas for this MachinePool. A
                  machine is considered ready when the node has been created and is
                  "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              unavailableReplicas:
                description: Total number of unavailable machine instances targeted
                  by this machine pool. This is the total number of machine instances
                  that are still required for the machine pool to have 100% available
                  capacity. They may either be machine instances that are running
                  but not yet available or machine instances that still have not been
                  created.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: machines.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Machine
    listKind: MachineList
    plural: machines
    shortNames:
    - ma
    singular: machine
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: Machine status such as Terminating/Pending/Running/Failed etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Node name associated with this machine
      jsonPath: .status.nodeRef.name
      name: NodeName
      priority: 1
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: Machine is the Schema for the machines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSpec defines the desired state of Machine
            properties:
              bootstrap:
                description: Bootstrap is a reference to a local struct which encapsulates
                  fields to configure the Machine’s bootstrapping mechanism.
                properties:
                  configRef:
                    description: ConfigRef is a reference to a bootstrap provider-specific
                      resource that holds configuration details. The reference is
                      optional to allow users/operators to specify Bootstrap.Data
                      without the need of a controller.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  data:
                    description: Data contains the bootstrap data, such as cloud-init
                      details scripts. If nil, the Machine should remain in the Pending
                      state.
                    type: string
                type: object
              infrastructureRef:
                description: InfrastructureRef is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              metadata:
                description: 'DEPRECATED: ObjectMeta has no function and isn''t used
                  anywhere.'
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: 'Annotations is an unstructured key value map stored
                      with a resource that may be set by external tools to store and
                      retrieve arbitrary metadata. They are not queryable and should
                      be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                    type: object
                  generateName:
                    description: "GenerateName is an optional prefix, used by the
                      server, to generate a unique name ONLY IF the Name field has
                      not been provided. If this field is used, the name returned
                      to the client will be different than the name passed. This value
                      will also be combined with a unique suffix. The provided value
                      has the same validation rules as the Name field, and may be
                      truncated by the length of the suffix required to make the value
                      unique on the server. \n If this field is specified and the
                      generated name exists, the server will NOT return a 409 - instead,
                      it will either return 201 Created or 500 with Reason ServerTimeout
                      indicating a unique name could not be found in the time allotted,
                      and the client should retry (optionally after the time indicated
                      in the Retry-After header). \n Applied only if Name is not specified.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: 'Map of string keys and values that can be used to
                      organize and categorize (scope and select) objects. May match
                      selectors of replication controllers and services. More info:
                      http://kubernetes.io/docs/user-guide/labels'
                    type: object
                  name:
                    description: 'Name must be unique within a namespace. Is required
                      when creating resources, although some resources may allow a
                      client to request the generation of an appropriate name automatically.
                      Name is primarily intended for creation idempotence and configuration
                      definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  namespace:
                    description: "Namespace defines the space within each name must
                      be unique. An empty namespace is equivalent to the \"default\"
                      namespace, but \"default\" is the canonical representation.
                      Not all objects are required to be scoped to a namespace - the
                      value of this field for those objects will be empty. \n Must
                      be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                    type: string
                  ownerReferences:
                    description: List of objects depended by this object. If ALL objects
                      in the list have been deleted, this object will be garbage collected.
                      If this object is managed by a controller, then an entry in
                      this list will point to this controller, with the controller
                      field set to true. There cannot be more than one managing controller.
                    items:
                      description: OwnerReference contains enough information to let
                        you identify an owning object. An owning object must be in
                        the same namespace as the dependent, or be cluster-scoped,
                        so there is no namespace field.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        blockOwnerDeletion:
                          description: If true, AND if the owner has the "foregroundDeletion"
                            finalizer, then the owner cannot be deleted from the key-value
                            store until this reference is removed. Defaults to false.
                            To set this field, a user needs "delete" permission of
                            the owner, otherwise 422 (Unprocessable Entity) will be
                            returned.
                          type: boolean
                        controller:
                          description: If true, this reference points to the managing
                            controller.
                          type: boolean
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                      required:
                      - apiVersion
                      - kind
                      - name
                      - uid
                      type: object
                    type: array
                type: object
              providerID:
                description: ProviderID is the identification ID of the machine provided
                  by the provider. This field must match the provider ID as seen on
                  the node object corresponding to this machine. This field is required
                  by higher level consumers of cluster-api. Example use case is cluster
                  autoscaler with cluster-api as provider. Clean-up logic in the autoscaler
                  compares machines to nodes to find out machines at provider which
                  could not get registered as Kubernetes nodes. With cluster-api as
                  a generic out-of-tree provider for autoscaler, this field is required
                  by autoscaler to be able to have a provider view of the list of
                  machines. Another list of nodes is queried from the k8s apiserver
                  and then a comparison is done to find out unregistered machines
                  and are marked for delete. This field will be set by the actuators
                  and consumed by higher level entities like autoscaler that will
                  be interfacing with cluster-api as generic provider.
                type: string
              version:
                description: Version defines the desired Kubernetes version. This
                  field is meant to be optionally used by bootstrap providers.
                type: string
            required:
            - bootstrap
            - infrastructureRef
            type: object
          status:
            description: MachineStatus defines the observed state of Machine
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              errorMessage:
                description: "ErrorMessage will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a more
                  verbose string suitable for logging and human consumption. \n This
                  field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the Machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of Machines can be added as events
                  to the Machine object and/or logged in the controller's output."
                type: string
              errorReason:
                description: "ErrorReason will be set in the event that there is a
                  terminal problem reconciling the Machine and will contain a succinct
                  value suitable for machine interpretation. \n This field should
                  not be set for transitive errors that a controller faces that are
                  expected to be fixed automatically over time (like service outages),
                  but instead indicate that something is fundamentally wrong with
                  the Machine's spec or the configuration of the controller, and that
                  manual intervention is required. Examples of terminal errors would
                  be invalid combinations of settings in the spec, values that are
                  unsupported by the controller, or the responsible controller itself
                  being critically misconfigured. \n Any transient errors that occur
                  during the reconciliation of Machines can be added as events to
                  the Machine object and/or logged in the controller's output."
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
              nodeRef:
                description: NodeRef will point to the corresponding Node if it exists.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              version:
                description: Version specifies the current version of Kubernetes running
                  on the corresponding Node. This is meant to be a means of bubbling
                  up status from the Node to the Machine. It is entirely optional,
                  but useful for end-user UX if it’s present.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: Machine status such as Terminating/Pending/Running/Failed etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Node name associated with this machine
      jsonPath: .status.nodeRef.name
      name: NodeName
      priority: 1
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Machine is the Schema for the machines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSpec defines the desired state of Machine
            properties:
              bootstrap:
                description: Bootstrap is a reference to a local struct which encapsulates
                  fields to configure the Machine’s bootstrapping mechanism.
                properties:
                  configRef:
                    description: ConfigRef is a reference to a bootstrap provider-specific
                      resource that holds configuration details. The reference is
                      optional to allow users/operators to specify Bootstrap.Data
                      without the need of a controller.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  data:
                    description: "Data contains the bootstrap data, such as cloud-init
                      details scripts. If nil, the Machine should remain in the Pending
                      state. \n Deprecated: This field has been deprecated in v1alpha3
                      and will be removed in a future version. Switch to DataSecretName."
                    type: string
                  dataSecretName:
                    description: DataSecretName is the name of the secret that stores
                      the bootstrap data script. If nil, the Machine should remain
                      in the Pending state.
                    type: string
                type: object
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomain:
                description: FailureDomain is the failure domain the machine will
                  be created in. Must match a key in the FailureDomains map stored
                  on the cluster object.
                type: string
              infrastructureRef:
                description: InfrastructureRef is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              providerID:
                description: ProviderID is the identification ID of the machine provided
                  by the provider. This field must match the provider ID as seen on
                  the node object corresponding to this machine. This field is required
                  by higher level consumers of cluster-api. Example use case is cluster
                  autoscaler with cluster-api as provider. Clean-up logic in the autoscaler
                  compares machines to nodes to find out machines at provider which
                  could not get registered as Kubernetes nodes. With cluster-api as
                  a generic out-of-tree provider for autoscaler, this field is required
                  by autoscaler to be able to have a provider view of the list of
                  machines. Another list of nodes is queried from the k8s apiserver
                  and then a comparison is done to find out unregistered machines
                  and are marked for delete. This field will be set by the actuators
                  and consumed by higher level entities like autoscaler that will
                  be interfacing with cluster-api as generic provider.
                type: string
              version:
                description: Version defines the desired Kubernetes version. This
                  field is meant to be optionally used by bootstrap providers.
                type: string
            required:
            - bootstrap
            - clusterName
            - infrastructureRef
            type: object
          status:
            description: MachineStatus defines the observed state of Machine
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              failureMessage:
                description: "FailureMessage will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a more
                  verbose string suitable for logging and human consumption. \n This
                  field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the Machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of Machines can be added as events
                  to the Machine object and/or logged in the controller's output."
                type: string
              failureReason:
                description: "FailureReason will be set in the event that there is
                  a terminal problem reconciling the Machine and will contain a succinct
                  value suitable for machine interpretation. \n This field should
                  not be set for transitive errors that a controller faces that are
                  expected to be fixed automatically over time (like service outages),
                  but instead indicate that something is fundamentally wrong with
                  the Machine's spec or the configuration of the controller, and that
                  manual intervention is required. Examples of terminal errors would
                  be invalid combinations of settings in the spec, values that are
                  unsupported by the controller, or the responsible controller itself
                  being critically misconfigured. \n Any transient errors that occur
                  during the reconciliation of Machines can be added as events to
                  the Machine object and/or logged in the controller's output."
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              lastUpdated:
                description: LastUpdated identifies when the phase of the Machine
                  last transitioned.
                format: date-time
                type: string
              nodeRef:
                description: NodeRef will point to the corresponding Node if it exists.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              version:
                description: Version specifies the current version of Kubernetes running
                  on the corresponding Node. This is meant to be a means of bubbling
                  up status from the Node to the Machine. It is entirely optional,
                  but useful for end-user UX if it’s present.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: machinesets.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachineSet
    listKind: MachineSetList
    plural: machinesets
    shortNames:
    - ms
    singular: machineset
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: MachineSet is the Schema for the machinesets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSetSpec defines the desired state of MachineSet
            properties:
              deletePolicy:
                description: DeletePolicy defines the policy used to identify nodes
                  to delete when downscaling. Defaults to "Random".  Valid values
                  are "Random, "Newest", "Oldest"
                enum:
                - Random
                - Newest
                - Oldest
                type: string
              minReadySeconds:
                description: MinReadySeconds is the minimum number of seconds for
                  which a newly created machine should be ready. Defaults to 0 (machine
                  will be considered available as soon as it is ready)
                format: int32
                type: integer
              replicas:
                description: Replicas is the number of desired replicas. This is a
                  pointer to distinguish between explicit zero and unspecified. Defaults
                  to 1.
                format: int32
                type: integer
              selector:
                description: 'Selector is a label query over machines that should
                  match the replica count. Label keys and values that must match in
                  order to be controlled by this MachineSet. It must match the machine
                  template''s labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              template:
                description: Template is the object that describes the machine that
                  will be created if insufficient replicas are detected. Object references
                  to custom resources resources are treated as templates.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: 'Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces"
                        type: string
                      ownerReferences:
                        description: List of objects depended by this object. If ALL
                          objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller.
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                          data:
                            description: Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state.
                            type: string
                        type: object
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      metadata:
                        description: 'DEPRECATED: ObjectMeta has no function and isn''t
                          used anywhere.'
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          generateName:
                            description: "GenerateName is an optional prefix, used
                              by the server, to generate a unique name ONLY IF the
                              Name field has not been provided. If this field is used,
                              the name returned to the client will be different than
                              the name passed. This value will also be combined with
                              a unique suffix. The provided value has the same validation
                              rules as the Name field, and may be truncated by the
                              length of the suffix required to make the value unique
                              on the server. \n If this field is specified and the
                              generated name exists, the server will NOT return a
                              409 - instead, it will either return 201 Created or
                              500 with Reason ServerTimeout indicating a unique name
                              could not be found in the time allotted, and the client
                              should retry (optionally after the time indicated in
                              the Retry-After header). \n Applied only if Name is
                              not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                            type: string
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                          name:
                            description: 'Name must be unique within a namespace.
                              Is required when creating resources, although some resources
                              may allow a client to request the generation of an appropriate
                              name automatically. Name is primarily intended for creation
                              idempotence and configuration definition. Cannot be
                              updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                            type: string
                          namespace:
                            description: "Namespace defines the space within each
                              name must be unique. An empty namespace is equivalent
                              to the \"default\" namespace, but \"default\" is the
                              canonical representation. Not all objects are required
                              to be scoped to a namespace - the value of this field
                              for those objects will be empty. \n Must be a DNS_LABEL.
                              Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                            type: string
                          ownerReferences:
                            description: List of objects depended by this object.
                              If ALL objects in the list have been deleted, this object
                              will be garbage collected. If this object is managed
                              by a controller, then an entry in this list will point
                              to this controller, with the controller field set to
                              true. There cannot be more than one managing controller.
                            items:
                              description: OwnerReference contains enough information
                                to let you identify an owning object. An owning object
                                must be in the same namespace as the dependent, or
                                be cluster-scoped, so there is no namespace field.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                blockOwnerDeletion:
                                  description: If true, AND if the owner has the "foregroundDeletion"
                                    finalizer, then the owner cannot be deleted from
                                    the key-value store until this reference is removed.
                                    Defaults to false. To set this field, a user needs
                                    "delete" permission of the owner, otherwise 422
                                    (Unprocessable Entity) will be returned.
                                  type: boolean
                                controller:
                                  description: If true, this reference points to the
                                    managing controller.
                                  type: boolean
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                  type: string
                                uid:
                                  description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                                  type: string
                              required:
                              - apiVersion
                              - kind
                              - name
                              - uid
                              type: object
                            type: array
                        type: object
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - infrastructureRef
                    type: object
                type: object
            required:
            - selector
            type: object
          status:
            description: MachineSetStatus defines the observed state of MachineSet
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachineSet.
                format: int32
                type: integer
              errorMessage:
                type: string
              errorReason:
                description: "In the event that there is a terminal problem reconciling
                  the replicas, both ErrorReason and ErrorMessage will be set. ErrorReason
                  will be populated with a succinct value suitable for machine interpretation,
                  while ErrorMessage will contain a more verbose string suitable for
                  logging and human consumption. \n These fields should not be set
                  for transitive errors that a controller faces that are expected
                  to be fixed automatically over time (like service outages), but
                  instead indicate that something is fundamentally wrong with the
                  MachineTemplate's spec or the configuration of the machine controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the machine controller, or the responsible machine
                  controller itself being critically misconfigured. \n Any transient
                  errors that occur during the reconciliation of Machines can be added
                  as events to the MachineSet object and/or logged in the controller's
                  output."
                type: string
              fullyLabeledReplicas:
                description: The number of replicas that have labels matching the
                  labels of the machine template of the MachineSet.
                format: int32
                type: integer
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed MachineSet.
                format: int64
                type: integer
              readyReplicas:
                description: The number of ready replicas for this MachineSet. A machine
                  is considered ready when the node has been created and is "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
            required:
            - replicas
            type: object
        type: object
    served: true
    storage: false
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
  - additionalPrinterColumns:
    - description: Total number of non-terminated machines targeted by this machineset
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of available machines (ready for at least minReadySeconds)
      jsonPath: .status.availableReplicas
      name: Available
      type: integer
    - description: Total number of ready machines targeted by this machineset.
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: MachineSet is the Schema for the machinesets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachineSetSpec defines the desired state of MachineSet
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              deletePolicy:
                description: DeletePolicy defines the policy used to identify nodes
                  to delete when downscaling. Defaults to "Random".  Valid values
                  are "Random, "Newest", "Oldest"
                enum:
                - Random
                - Newest
                - Oldest
                type: string
              minReadySeconds:
                description: MinReadySeconds is the minimum number of seconds for
                  which a newly created machine should be ready. Defaults to 0 (machine
                  will be considered available as soon as it is ready)
                format: int32
                type: integer
              replicas:
                description: Replicas is the number of desired replicas. This is a
                  pointer to distinguish between explicit zero and unspecified. Defaults
                  to 1.
                format: int32
                type: integer
              selector:
                description: 'Selector is a label query over machines that should
                  match the replica count. Label keys and values that must match in
                  order to be controlled by this MachineSet. It must match the machine
                  template''s labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              template:
                description: Template is the object that describes the machine that
                  will be created if insufficient replicas are detected. Object references
                  to custom resources resources are treated as templates.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: 'Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces"
                        type: string
                      ownerReferences:
                        description: List of objects depended by this object. If ALL
                          objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller.
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: This field
                              has been deprecated in v1alpha3 and will be removed
                              in a future version. Switch to DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - selector
            type: object
          status:
            description: MachineSetStatus defines the observed state of MachineSet
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachineSet.
                format: int32
                type: integer
              failureMessage:
                type: string
              failureReason:
                description: "In the event that there is a terminal problem reconciling
                  the replicas, both FailureReason and FailureMessage will be set.
                  FailureReason will be populated with a succinct value suitable for
                  machine interpretation, while FailureMessage will contain a more
                  verbose string suitable for logging and human consumption. \n These
                  fields should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the MachineTemplate's spec or the configuration of the
                  machine controller, and that manual intervention is required. Examples
                  of terminal errors would be invalid combinations of settings in
                  the spec, values that are unsupported by the machine controller,
                  or the responsible machine controller itself being critically misconfigured.
                  \n Any transient errors that occur during the reconciliation of
                  Machines can be added as events to the MachineSet object and/or
                  logged in the controller's output."
                type: string
              fullyLabeledReplicas:
                description: The number of replicas that have labels matching the
                  labels of the machine template of the MachineSet.
                format: int32
                type: integer
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed MachineSet.
                format: int64
                type: integer
              readyReplicas:
                description: The number of ready replicas for this MachineSet. A machine
                  is considered ready when the node has been created and is "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              selector:
                description: 'Selector is the same as the label selector but in the
                  string format to avoid introspection by clients. The string will
                  be in the same format as the query-param syntax. More info about
                  label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
            required:
            - replicas
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-mutating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /mutate-cluster-x-k8s-io-v1alpha3-cluster
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.cluster.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusters
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /mutate-cluster-x-k8s-io-v1alpha3-machine
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machine.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machines
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /mutate-cluster-x-k8s-io-v1alpha3-machinedeployment
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machinedeployment.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinedeployments
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /mutate-cluster-x-k8s-io-v1alpha3-machinehealthcheck
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machinehealthcheck.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinehealthchecks
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /mutate-cluster-x-k8s-io-v1alpha3-machineset
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.machineset.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinesets
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /mutate-exp-cluster-x-k8s-io-v1alpha3-machinepool
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.exp.machinepool.cluster.x-k8s.io
  rules:
  - apiGroups:
    - exp.cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinepools
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-leader-election-role
  namespace: capi-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      cluster.x-k8s.io/aggregate-to-manager: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-aggregated-manager-role
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/aggregate-to-manager: "true"
    cluster.x-k8s.io/provider: cluster-api
  name: capi-manager-role
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - controlplane.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinedeployments
  - machinedeployments/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinehealthchecks
  - machinehealthchecks/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  - machines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machinesets
  - machinesets/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - exp.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - exp.cluster.x-k8s.io
  resources:
  - machinepools
  - machinepools/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-leader-election-rolebinding
  namespace: capi-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-aggregated-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    control-plane: controller-manager
  name: capi-controller-manager-metrics-service
  namespace: capi-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    cluster.x-k8s.io/provider: cluster-api
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-webhook-service
  namespace: capi-webhook-system
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    cluster.x-k8s.io/provider: cluster-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    control-plane: controller-manager
  name: capi-controller-manager
  namespace: capi-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: cluster-api
      control-plane: controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: cluster-api
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --enable-leader-election
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/cluster-api-controller:v0.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
    control-plane: controller-manager
  name: capi-controller-manager
  namespace: capi-webhook-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: cluster-api
      control-plane: controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: cluster-api
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --webhook-port=9443
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/cluster-api-controller:v0.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: capi-webhook-service-cert
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-serving-cert
  namespace: capi-webhook-system
spec:
  dnsNames:
  - capi-webhook-service.capi-webhook-system.svc
  - capi-webhook-service.capi-webhook-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: capi-selfsigned-issuer
  secretName: capi-webhook-service-cert
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-selfsigned-issuer
  namespace: capi-webhook-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: capi-validating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /validate-cluster-x-k8s-io-v1alpha3-cluster
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.cluster.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusters
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /validate-cluster-x-k8s-io-v1alpha3-machine
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machine.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machines
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /validate-cluster-x-k8s-io-v1alpha3-machinedeployment
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machinedeployment.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinedeployments
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /validate-cluster-x-k8s-io-v1alpha3-machinehealthcheck
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machinehealthcheck.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinehealthchecks
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /validate-cluster-x-k8s-io-v1alpha3-machineset
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.machineset.cluster.x-k8s.io
  rules:
  - apiGroups:
    - cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinesets
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-webhook-service
      namespace: capi-webhook-system
      path: /validate-exp-cluster-x-k8s-io-v1alpha3-machinepool
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.exp.machinepool.cluster.x-k8s.io
  rules:
  - apiGroups:
    - exp.cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - machinepools
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-bootstrap-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-kubeadm-bootstrap-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3
  name: kubeadmconfigs.bootstrap.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-bootstrap-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfig
    listKind: KubeadmConfigList
    plural: kubeadmconfigs
    singular: kubeadmconfig
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: KubeadmConfig is the Schema for the kubeadmconfigs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                      type:
                        description: Type defines the DNS add-on to be used
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: ImageRepository sets the container registry to pull
                      images from. If empty, `k8s.gcr.io` will be used by default;
                      in case of kubernetes version is a CI build (kubernetes version
                      starts with `ci/` or `ci-cross/`) `gcr.io/kubernetes-ci-images`
                      will be used as a default for control plane components and for
                      kube-proxy, while `k8s.gcr.io` will be used for all the other
                      images.
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.kuberentesVersion'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to the first element of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                          if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to the first element of the Cluster object's spec.clusterNetwork.pods.cidrBlocks
                          field, or to "10.96.0.0/12" if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  useHyperKubeImage:
                    description: UseHyperKubeImage controls if hyperkube should be
                      used for Kubernetes components instead of their respective separate
                      images
                    type: boolean
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - content
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                type: string
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: object
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    required:
                    - advertiseAddress
                    - bindPort
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        - unsafeSkipCAVerification
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: 'TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information TODO: revisit when there
                          is defaulting from k/k'
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig
            properties:
              bootstrapData:
                description: BootstrapData will be a cloud-init script for now
                format: byte
                type: string
              errorMessage:
                description: ErrorMessage will be set on non-retryable errors
                type: string
              errorReason:
                description: ErrorReason will be set on non-retryable errors
                type: string
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeadmConfig is the Schema for the kubeadmconfigs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                      type:
                        description: Type defines the DNS add-on to be used
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: ImageRepository sets the container registry to pull
                      images from. If empty, `k8s.gcr.io` will be used by default;
                      in case of kubernetes version is a CI build (kubernetes version
                      starts with `ci/` or `ci-cross/`) `gcr.io/kubernetes-ci-images`
                      will be used as a default for control plane components and for
                      kube-proxy, while `k8s.gcr.io` will be used for all the other
                      images.
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.kuberentesVersion'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to the first element of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                          if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to the first element of the Cluster object's spec.clusterNetwork.pods.cidrBlocks
                          field, or to "10.96.0.0/12" if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  useHyperKubeImage:
                    description: UseHyperKubeImage controls if hyperkube should be
                      used for Kubernetes components instead of their respective separate
                      images
                    type: boolean
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - content
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                type: string
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: object
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    required:
                    - advertiseAddress
                    - bindPort
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        - unsafeSkipCAVerification
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: 'TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information TODO: revisit when there
                          is defaulting from k/k'
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              useExperimentalRetryJoin:
                description: "UseExperimentalRetryJoin replaces a basic kubeadm command
                  with a shell script with retries for joins. \n This is meant to
                  be an experimental temporary workaround on some environments where
                  joins fail due to timing (and other issues). The long term goal
                  is to add retries to kubeadm proper and use that functionality.
                  \n This will add about 40KB to userdata \n For more information,
                  refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                type: boolean
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
              verbosity:
                description: Verbosity is the number for the kubeadm log level verbosity.
                  It overrides the `--v` flag in kubeadm commands.
                format: int32
                type: integer
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig
            properties:
              bootstrapData:
                description: "BootstrapData will be a cloud-init script for now. \n
                  Deprecated: This field has been deprecated in v1alpha3 and will
                  be removed in a future version. Switch to DataSecretName."
                format: byte
                type: string
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              failureMessage:
                description: FailureMessage will be set on non-retryable errors
                type: string
              failureReason:
                description: FailureReason will be set on non-retryable errors
                type: string
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-kubeadm-bootstrap-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3
  name: kubeadmconfigtemplates.bootstrap.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-bootstrap-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfigTemplate
    listKind: KubeadmConfigTemplateList
    plural: kubeadmconfigtemplates
    singular: kubeadmconfigtemplate
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure
                properties:
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              type:
                                description: Type defines the DNS add-on to be used
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. If empty, `k8s.gcr.io` will be
                              used by default; in case of kubernetes version is a
                              CI build (kubernetes version starts with `ci/` or `ci-cross/`)
                              `gcr.io/kubernetes-ci-images` will be used as a default
                              for control plane components and for kube-proxy, while
                              `k8s.gcr.io` will be used for all the other images.
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.kuberentesVersion'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to the first element
                                  of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to the first element of the Cluster
                                  object's spec.clusterNetwork.pods.cidrBlocks field,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          useHyperKubeImage:
                            description: UseHyperKubeImage controls if hyperkube should
                              be used for Kubernetes components instead of their respective
                              separate images
                            type: boolean
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - content
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        type: string
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: object
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                required:
                                - advertiseAddress
                                - bindPort
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                - unsafeSkipCAVerification
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: 'TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information TODO: revisit
                                  when there is defaulting from k/k'
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: false
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure
                properties:
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              type:
                                description: Type defines the DNS add-on to be used
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. If empty, `k8s.gcr.io` will be
                              used by default; in case of kubernetes version is a
                              CI build (kubernetes version starts with `ci/` or `ci-cross/`)
                              `gcr.io/kubernetes-ci-images` will be used as a default
                              for control plane components and for kube-proxy, while
                              `k8s.gcr.io` will be used for all the other images.
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.kuberentesVersion'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to the first element
                                  of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to the first element of the Cluster
                                  object's spec.clusterNetwork.pods.cidrBlocks field,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          useHyperKubeImage:
                            description: UseHyperKubeImage controls if hyperkube should
                              be used for Kubernetes components instead of their respective
                              separate images
                            type: boolean
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - content
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        type: string
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: object
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                required:
                                - advertiseAddress
                                - bindPort
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                - unsafeSkipCAVerification
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: 'TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information TODO: revisit
                                  when there is defaulting from k/k'
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      useExperimentalRetryJoin:
                        description: "UseExperimentalRetryJoin replaces a basic kubeadm
                          command with a shell script with retries for joins. \n This
                          is meant to be an experimental temporary workaround on some
                          environments where joins fail due to timing (and other issues).
                          The long term goal is to add retries to kubeadm proper and
                          use that functionality. \n This will add about 40KB to userdata
                          \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                        type: boolean
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      verbosity:
                        description: Verbosity is the number for the kubeadm log level
                          verbosity. It overrides the `--v` flag in kubeadm commands.
                        format: int32
                        type: integer
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-leader-election-role
  namespace: capi-kubeadm-bootstrap-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  resources:
  - kubeadmconfigs
  - kubeadmconfigs/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  - machines
  - machines/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - exp.cluster.x-k8s.io
  resources:
  - machinepools
  - machinepools/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-leader-election-rolebinding
  namespace: capi-kubeadm-bootstrap-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-kubeadm-bootstrap-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-kubeadm-bootstrap-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-kubeadm-bootstrap-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-kubeadm-bootstrap-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-kubeadm-bootstrap-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-kubeadm-bootstrap-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-bootstrap-controller-manager-metrics-service
  namespace: capi-kubeadm-bootstrap-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-webhook-service
  namespace: capi-webhook-system
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-bootstrap-controller-manager
  namespace: capi-kubeadm-bootstrap-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: bootstrap-kubeadm
      control-plane: controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: bootstrap-kubeadm
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --enable-leader-election
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/kubeadm-bootstrap-controller:v0.3.3
        imagePullPolicy: IfNotPresent
        name: manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-bootstrap-controller-manager
  namespace: capi-webhook-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: bootstrap-kubeadm
      control-plane: controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: bootstrap-kubeadm
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --webhook-port=9443
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/kubeadm-bootstrap-controller:v0.3.3
        imagePullPolicy: IfNotPresent
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: capi-kubeadm-bootstrap-webhook-service-cert
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-serving-cert
  namespace: capi-webhook-system
spec:
  dnsNames:
  - capi-kubeadm-bootstrap-webhook-service.capi-webhook-system.svc
  - capi-kubeadm-bootstrap-webhook-service.capi-webhook-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: capi-kubeadm-bootstrap-selfsigned-issuer
  secretName: capi-kubeadm-bootstrap-webhook-service-cert
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
  name: capi-kubeadm-bootstrap-selfsigned-issuer
  namespace: capi-webhook-system
spec:
  selfSigned: {}
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-control-plane-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-kubeadm-control-plane-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    cluster.x-k8s.io/v1alpha3: v1alpha3
  name: kubeadmcontrolplanes.controlplane.cluster.x-k8s.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        caBundle: Cg==
        service:
          name: capi-kubeadm-control-plane-webhook-service
          namespace: capi-webhook-system
          path: /convert
      conversionReviewVersions:
      - v1
      - v1beta1
  group: controlplane.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmControlPlane
    listKind: KubeadmControlPlaneList
    plural: kubeadmcontrolplanes
    shortNames:
    - kcp
    singular: kubeadmcontrolplane
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: KubeadmControlPlane API Server is ready to receive requests
      jsonPath: .status.ready
      name: Ready
      type: boolean
    - description: This denotes whether or not the control plane has the uploaded
        kubeadm-config configmap
      jsonPath: .status.initialized
      name: Initialized
      type: boolean
    - description: Total number of non-terminated machines targeted by this control
        plane
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of fully running and ready control plane machines
      jsonPath: .status.readyReplicas
      name: Ready Replicas
      type: integer
    - description: Total number of non-terminated machines targeted by this control
        plane that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated Replicas
      type: integer
    - description: Total number of unavailable machines targeted by this control plane
      jsonPath: .status.unavailableReplicas
      name: Unavailable Replicas
      type: integer
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeadmControlPlane is the Schema for the KubeadmControlPlane
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneSpec defines the desired state of KubeadmControlPlane.
            properties:
              infrastructureTemplate:
                description: InfrastructureTemplate is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              kubeadmConfigSpec:
                description: KubeadmConfigSpec is a KubeadmConfigSpec to use for initializing
                  and joining machines to the control plane.
                properties:
                  clusterConfiguration:
                    description: ClusterConfiguration along with InitConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiServer:
                        description: APIServer contains extra settings for the API
                          server control plane component
                        properties:
                          certSANs:
                            description: CertSANs sets extra Subject Alternative Names
                              for the API Server signing cert.
                            items:
                              type: string
                            type: array
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                          timeoutForControlPlane:
                            description: TimeoutForControlPlane controls the timeout
                              that we use for API server to appear
                            type: string
                        type: object
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      certificatesDir:
                        description: 'CertificatesDir specifies where to store or
                          look for all required certificates. NB: if not provided,
                          this will default to `/etc/kubernetes/pki`'
                        type: string
                      clusterName:
                        description: The cluster name
                        type: string
                      controlPlaneEndpoint:
                        description: 'ControlPlaneEndpoint sets a stable IP address
                          or DNS name for the control plane; it can be a valid IP
                          address or a RFC-1123 DNS subdomain, both with optional
                          TCP port. In case the ControlPlaneEndpoint is not specified,
                          the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint
                          is specified but without a TCP port, the BindPort is used.
                          Possible usages are: e.g. In a cluster with more than one
                          control plane instances, this field should be assigned the
                          address of the external load balancer in front of the control
                          plane instances. e.g.  in environments with enforced node
                          recycling, the ControlPlaneEndpoint could be used for assigning
                          a stable DNS to the control plane. NB: This value defaults
                          to the first value in the Cluster object status.apiEndpoints
                          array.'
                        type: string
                      controllerManager:
                        description: ControllerManager contains extra settings for
                          the controller manager control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      dns:
                        description: DNS defines the options for the DNS add-on installed
                          in the cluster.
                        properties:
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          type:
                            description: Type defines the DNS add-on to be used
                            type: string
                        type: object
                      etcd:
                        description: 'Etcd holds configuration for etcd. NB: This
                          value defaults to a Local (stacked) etcd'
                        properties:
                          external:
                            description: External describes how to connect to an external
                              etcd cluster Local and External are mutually exclusive
                            properties:
                              caFile:
                                description: CAFile is an SSL Certificate Authority
                                  file used to secure etcd communication. Required
                                  if using a TLS connection.
                                type: string
                              certFile:
                                description: CertFile is an SSL certification file
                                  used to secure etcd communication. Required if using
                                  a TLS connection.
                                type: string
                              endpoints:
                                description: Endpoints of etcd members. Required for
                                  ExternalEtcd.
                                items:
                                  type: string
                                type: array
                              keyFile:
                                description: KeyFile is an SSL key file used to secure
                                  etcd communication. Required if using a TLS connection.
                                type: string
                            required:
                            - caFile
                            - certFile
                            - endpoints
                            - keyFile
                            type: object
                          local:
                            description: Local provides configuration knobs for configuring
                              the local etcd instance Local and External are mutually
                              exclusive
                            properties:
                              dataDir:
                                description: DataDir is the directory etcd will place
                                  its data. Defaults to "/var/lib/etcd".
                                type: string
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: ExtraArgs are extra arguments provided
                                  to the etcd binary when run inside a static pod.
                                type: object
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              peerCertSANs:
                                description: PeerCertSANs sets extra Subject Alternative
                                  Names for the etcd peer signing cert.
                                items:
                                  type: string
                                type: array
                              serverCertSANs:
                                description: ServerCertSANs sets extra Subject Alternative
                                  Names for the etcd server signing cert.
                                items:
                                  type: string
                                type: array
                            type: object
                        type: object
                      featureGates:
                        additionalProperties:
                          type: boolean
                        description: FeatureGates enabled by the user.
                        type: object
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. If empty, `k8s.gcr.io` will be used by
                          default; in case of kubernetes version is a CI build (kubernetes
                          version starts with `ci/` or `ci-cross/`) `gcr.io/kubernetes-ci-images`
                          will be used as a default for control plane components and
                          for kube-proxy, while `k8s.gcr.io` will be used for all
                          the other images.
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      kubernetesVersion:
                        description: 'KubernetesVersion is the target version of the
                          control plane. NB: This value defaults to the Machine object
                          spec.kuberentesVersion'
                        type: string
                      networking:
                        description: 'Networking holds configuration for the networking
                          topology of the cluster. NB: This value defaults to the
                          Cluster object spec.clusterNetwork.'
                        properties:
                          dnsDomain:
                            description: DNSDomain is the dns domain used by k8s services.
                              Defaults to "cluster.local".
                            type: string
                          podSubnet:
                            description: PodSubnet is the subnet used by pods. If
                              unset, the API server will not allocate CIDR ranges
                              for every node. Defaults to the first element of the
                              Cluster object's spec.clusterNetwork.services.cidrBlocks
                              if that is set
                            type: string
                          serviceSubnet:
                            description: ServiceSubnet is the subnet used by k8s services.
                              Defaults to the first element of the Cluster object's
                              spec.clusterNetwork.pods.cidrBlocks field, or to "10.96.0.0/12"
                              if that's unset.
                            type: string
                        type: object
                      scheduler:
                        description: Scheduler contains extra settings for the scheduler
                          control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      useHyperKubeImage:
                        description: UseHyperKubeImage controls if hyperkube should
                          be used for Kubernetes components instead of their respective
                          separate images
                        type: boolean
                    type: object
                  files:
                    description: Files specifies extra files to be passed to user_data
                      upon creation.
                    items:
                      description: File defines the input for generating write_files
                        in cloud-init.
                      properties:
                        content:
                          description: Content is the actual content of the file.
                          type: string
                        encoding:
                          description: Encoding specifies the encoding of the file
                            contents.
                          enum:
                          - base64
                          - gzip
                          - gzip+base64
                          type: string
                        owner:
                          description: Owner specifies the ownership of the file,
                            e.g. "root:root".
                          type: string
                        path:
                          description: Path specifies the full path on disk where
                            to store the file.
                          type: string
                        permissions:
                          description: Permissions specifies the permissions to assign
                            to the file, e.g. "0640".
                          type: string
                      required:
                      - content
                      - path
                      type: object
                    type: array
                  format:
                    description: Format specifies the output format of the bootstrap
                      data
                    enum:
                    - cloud-config
                    type: string
                  initConfiguration:
                    description: InitConfiguration along with ClusterConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      bootstrapTokens:
                        description: BootstrapTokens is respected at `kubeadm init`
                          time and describes a set of Bootstrap Tokens to create.
                          This information IS NOT uploaded to the kubeadm cluster
                          configmap, partly because of its sensitive nature
                        items:
                          description: BootstrapToken describes one bootstrap token,
                            stored as a Secret in the cluster
                          properties:
                            description:
                              description: Description sets a human-friendly message
                                why this token exists and what it's used for, so other
                                administrators can know its purpose.
                              type: string
                            expires:
                              description: Expires specifies the timestamp when this
                                token expires. Defaults to being set dynamically at
                                runtime based on the TTL. Expires and TTL are mutually
                                exclusive.
                              format: date-time
                              type: string
                            groups:
                              description: Groups specifies the extra groups that
                                this token will authenticate as when/if used for authentication
                              items:
                                type: string
                              type: array
                            token:
                              description: Token is used for establishing bidirectional
                                trust between nodes and control-planes. Used for joining
                                nodes in the cluster.
                              type: object
                            ttl:
                              description: TTL defines the time to live for this token.
                                Defaults to 24h. Expires and TTL are mutually exclusive.
                              type: string
                            usages:
                              description: Usages describes the ways in which this
                                token can be used. Can by default be used for establishing
                                bidirectional trust, but that can be changed here.
                              items:
                                type: string
                              type: array
                          required:
                          - token
                          type: object
                        type: array
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance that's deployed on this control plane
                          node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                          in the sense that ControlPlaneEndpoint is the global endpoint
                          for the cluster, which then loadbalances the requests to
                          each individual API server. This configuration object lets
                          you customize what IP/DNS name and port the local API server
                          advertises it's accessible on. By default, kubeadm tries
                          to auto-detect the IP of the default interface and use that,
                          but in case that process fails you may set the desired value
                          here.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: Required. The taint value corresponding
                                    to the taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  joinConfiguration:
                    description: JoinConfiguration is the kubeadm configuration for
                      the join command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      caCertPath:
                        description: 'CACertPath is the path to the SSL certificate
                          authority used to secure comunications between node and
                          control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                          TODO: revisit when there is defaulting from k/k'
                        type: string
                      controlPlane:
                        description: ControlPlane defines the additional control plane
                          instance to be deployed on the joining node. If nil, no
                          additional control plane instance will be deployed.
                        properties:
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance to be deployed on this node.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                        type: object
                      discovery:
                        description: 'Discovery specifies the options for the kubelet
                          to use during the TLS Bootstrap process TODO: revisit when
                          there is defaulting from k/k'
                        properties:
                          bootstrapToken:
                            description: BootstrapToken is used to set the options
                              for bootstrap token based discovery BootstrapToken and
                              File are mutually exclusive
                            properties:
                              apiServerEndpoint:
                                description: APIServerEndpoint is an IP or domain
                                  name to the API server from which info will be fetched.
                                type: string
                              caCertHashes:
                                description: 'CACertHashes specifies a set of public
                                  key pins to verify when token-based discovery is
                                  used. The root CA found during discovery must match
                                  one of these values. Specifying an empty set disables
                                  root CA pinning, which can be unsafe. Each hash
                                  is specified as "<type>:<value>", where the only
                                  currently supported type is "sha256". This is a
                                  hex-encoded SHA-256 hash of the Subject Public Key
                                  Info (SPKI) object in DER-encoded ASN.1. These hashes
                                  can be calculated using, for example, OpenSSL: openssl
                                  x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                                  der 2>&/dev/null | openssl dgst -sha256 -hex'
                                items:
                                  type: string
                                type: array
                              token:
                                description: Token is a token used to validate cluster
                                  information fetched from the control-plane.
                                type: string
                              unsafeSkipCAVerification:
                                description: UnsafeSkipCAVerification allows token-based
                                  discovery without CA verification via CACertHashes.
                                  This can weaken the security of kubeadm since other
                                  nodes can impersonate the control-plane.
                                type: boolean
                            required:
                            - token
                            - unsafeSkipCAVerification
                            type: object
                          file:
                            description: File is used to specify a file or URL to
                              a kubeconfig file from which to load cluster information
                              BootstrapToken and File are mutually exclusive
                            properties:
                              kubeConfigPath:
                                description: KubeConfigPath is used to specify the
                                  actual file path or URL to the kubeconfig file from
                                  which to load cluster information
                                type: string
                            required:
                            - kubeConfigPath
                            type: object
                          timeout:
                            description: Timeout modifies the discovery timeout
                            type: string
                          tlsBootstrapToken:
                            description: 'TLSBootstrapToken is a token used for TLS
                              bootstrapping. If .BootstrapToken is set, this field
                              is defaulted to .BootstrapToken.Token, but can be overridden.
                              If .File is set, this field **must be set** in case
                              the KubeConfigFile does not contain any other authentication
                              information TODO: revisit when there is defaulting from
                              k/k'
                            type: string
                        type: object
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: Required. The taint value corresponding
                                    to the taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  ntp:
                    description: NTP specifies NTP configuration
                    properties:
                      enabled:
                        description: Enabled specifies whether NTP should be enabled
                        type: boolean
                      servers:
                        description: Servers specifies which NTP servers to use
                        items:
                          type: string
                        type: array
                    type: object
                  postKubeadmCommands:
                    description: PostKubeadmCommands specifies extra commands to run
                      after kubeadm runs
                    items:
                      type: string
                    type: array
                  preKubeadmCommands:
                    description: PreKubeadmCommands specifies extra commands to run
                      before kubeadm runs
                    items:
                      type: string
                    type: array
                  useExperimentalRetryJoin:
                    description: "UseExperimentalRetryJoin replaces a basic kubeadm
                      command with a shell script with retries for joins. \n This
                      is meant to be an experimental temporary workaround on some
                      environments where joins fail due to timing (and other issues).
                      The long term goal is to add retries to kubeadm proper and use
                      that functionality. \n This will add about 40KB to userdata
                      \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                    type: boolean
                  users:
                    description: Users specifies extra users to add
                    items:
                      description: User defines the input for a generated user in
                        cloud-init.
                      properties:
                        gecos:
                          description: Gecos specifies the gecos to use for the user
                          type: string
                        groups:
                          description: Groups specifies the additional groups for
                            the user
                          type: string
                        homeDir:
                          description: HomeDir specifies the home directory to use
                            for the user
                          type: string
                        inactive:
                          description: Inactive specifies whether to mark the user
                            as inactive
                          type: boolean
                        lockPassword:
                          description: LockPassword specifies if password login should
                            be disabled
                          type: boolean
                        name:
                          description: Name specifies the user name
                          type: string
                        passwd:
                          description: Passwd specifies a hashed password for the
                            user
                          type: string
                        primaryGroup:
                          description: PrimaryGroup specifies the primary group for
                            the user
                          type: string
                        shell:
                          description: Shell specifies the user's shell
                          type: string
                        sshAuthorizedKeys:
                          description: SSHAuthorizedKeys specifies a list of ssh authorized
                            keys for the user
                          items:
                            type: string
                          type: array
                        sudo:
                          description: Sudo specifies a sudo role for the user
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  verbosity:
                    description: Verbosity is the number for the kubeadm log level
                      verbosity. It overrides the `--v` flag in kubeadm commands.
                    format: int32
                    type: integer
                type: object
              replicas:
                description: Number of desired machines. Defaults to 1. When stacked
                  etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members).
                  This is a pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              upgradeAfter:
                description: UpgradeAfter is a field to indicate an upgrade should
                  be performed after the specified time even if no changes have been
                  made to the KubeadmControlPlane
                format: date-time
                type: string
              version:
                description: Version defines the desired Kubernetes version.
                minLength: 2
                pattern: ^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)([-0-9a-zA-Z_\.+]*)?$
                type: string
            required:
            - infrastructureTemplate
            - kubeadmConfigSpec
            - version
            type: object
          status:
            description: KubeadmControlPlaneStatus defines the observed state of KubeadmControlPlane.
            properties:
              failureMessage:
                description: ErrorMessage indicates that there is a terminal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a terminal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              initialized:
                description: Initialized denotes whether or not the control plane
                  has the uploaded kubeadm-config configmap.
                type: boolean
              ready:
                description: Ready denotes that the KubeadmControlPlane API Server
                  is ready to receive requests.
                type: boolean
              readyReplicas:
                description: Total number of fully running and ready control plane
                  machines.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  control plane (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the label selector in string format to avoid
                  introspection by clients, and is used to provide the CRD-based integration
                  for the scale subresource and additional integrations for things
                  like kubectl describe.. The string will be in the same format as
                  the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  control plane. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet ready or machines
                  that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  control plane that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-kubeadm-control-plane-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-mutating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-webhook-system
      path: /mutate-controlplane-cluster-x-k8s-io-v1alpha3-kubeadmcontrolplane
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: default.kubeadmcontrolplane.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmcontrolplanes
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-leader-election-role
  namespace: capi-kubeadm-control-plane-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-manager-role
  namespace: capi-kubeadm-control-plane-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - rbac
  resources:
  - rolebindings
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - rbac
  resources:
  - roles
  verbs:
  - create
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-manager-role
rules:
- apiGroups:
  - bootstrap.cluster.x-k8s.io
  - controlplane.cluster.x-k8s.io
  - infrastructure.cluster.x-k8s.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  - clusters/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  - machines/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-leader-election-rolebinding
  namespace: capi-kubeadm-control-plane-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: capi-kubeadm-control-plane-leader-election-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-kubeadm-control-plane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-kubeadm-control-plane-manager-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-kubeadm-control-plane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: capi-kubeadm-control-plane-proxy-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: capi-kubeadm-control-plane-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-control-plane-controller-manager-metrics-service
  namespace: capi-kubeadm-control-plane-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-webhook-service
  namespace: capi-webhook-system
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    cluster.x-k8s.io/provider: control-plane-kubeadm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-control-plane-controller-manager
  namespace: capi-kubeadm-control-plane-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: control-plane-kubeadm
      control-plane: controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: control-plane-kubeadm
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --enable-leader-election
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/kubeadm-control-plane-controller:v0.3.3
        imagePullPolicy: IfNotPresent
        name: manager
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    control-plane: controller-manager
  name: capi-kubeadm-control-plane-controller-manager
  namespace: capi-webhook-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: control-plane-kubeadm
      control-plane: controller-manager
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: control-plane-kubeadm
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --metrics-addr=127.0.0.1:8080
        - --webhook-port=9443
        command:
        - /manager
        image: us.gcr.io/k8s-artifacts-prod/cluster-api/kubeadm-control-plane-controller:v0.3.3
        imagePullPolicy: IfNotPresent
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: capi-kubeadm-control-plane-webhook-service-cert
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-serving-cert
  namespace: capi-webhook-system
spec:
  dnsNames:
  - capi-kubeadm-control-plane-webhook-service.capi-webhook-system.svc
  - capi-kubeadm-control-plane-webhook-service.capi-webhook-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: capi-kubeadm-control-plane-selfsigned-issuer
  secretName: capi-kubeadm-control-plane-webhook-service-cert
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-selfsigned-issuer
  namespace: capi-webhook-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-kubeadm-control-plane-serving-cert
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
  name: capi-kubeadm-control-plane-validating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: capi-kubeadm-control-plane-webhook-service
      namespace: capi-webhook-system
      path: /validate-controlplane-cluster-x-k8s-io-v1alpha3-kubeadmcontrolplane
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validation.kubeadmcontrolplane.controlplane.cluster.x-k8s.io
  rules:
  - apiGroups:
    - controlplane.cluster.x-k8s.io
    apiVersions:
    - v1alpha3
    operations:
    - CREATE
    - UPDATE
    resources:
    - kubeadmcontrolplanes
