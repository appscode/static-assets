components:
  schemas:
    k8s.io.api.core.v1.ObjectReference:
      description: ObjectReference contains enough information to let you inspect
        or modify the referred object.
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
        fieldPath:
          description: 'If referring to a piece of an object instead of an entire
            object, this string should contain a valid JSON/Go field access statement,
            such as desiredState.manifest.containers[2]. For example, if the object
            reference is to a container within a pod, this would take on a value like:
            "spec.containers{name}" (where "name" refers to the name of the container
            that triggered the event) or if no container name is specified "spec.containers[2]"
            (container with index 2 in this pod). This syntax is chosen only to have
            some well-defined way of referencing a part of an object.'
          type: string
        kind:
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        namespace:
          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
          type: string
        resourceVersion:
          description: 'Specific resourceVersion to which this reference is made,
            if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
          type: string
        uid:
          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
          type: string
      type: object
      x-kubernetes-map-type: atomic
    k8s.io.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON:
      description: 'JSON represents any valid JSON value. These types are supported:
        bool, int64, float64, string, []interface{}, map[string]interface{} and nil.'
    k8s.io.apimachinery.pkg.apis.meta.v1.Duration:
      description: Duration is a wrapper around time.Duration which supports correct
        marshaling to YAML and JSON. In particular, it marshals into strings, which
        can be used as map keys in json.
      type: string
    k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1:
      description: |-
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

        The exact format is defined in sigs.k8s.io/structured-merge-diff
      type: object
    k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version
        of the resource that the fieldset applies to.
      properties:
        apiVersion:
          description: APIVersion defines the version of this resource that this field
            set applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field set
            because it cannot be automatically converted.
          type: string
        fieldsType:
          description: 'FieldsType is the discriminator for the different fields format
            and version. There is currently only one possible value: "FieldsV1"'
          type: string
        fieldsV1:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.FieldsV1'
          description: FieldsV1 holds the first JSON version format as described in
            the "FieldsV1" type.
        manager:
          description: Manager is an identifier of the workflow managing these fields.
          type: string
        operation:
          description: Operation is the type of operation which lead to this ManagedFieldsEntry
            being created. The only valid values for this field are 'Apply' and 'Update'.
          type: string
        subresource:
          description: Subresource is the name of the subresource used to update that
            object, or empty string if the object was updated through the main resource.
            The value of this field is used to distinguish between managers, even
            if they share the same name. For example, a status update will be distinct
            from a regular update using the same manager name. Note that the APIVersion
            field is not related to the Subresource field and it always corresponds
            to the version of the main resource.
          type: string
        time:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
          description: Time is timestamp of when these fields were set. It should
            always be empty if Operation is 'Apply'
      type: object
    k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      description: ObjectMeta is metadata that all persisted resources must have,
        which includes all objects users must create.
      properties:
        annotations:
          additionalProperties:
            default: ""
            type: string
          description: 'Annotations is an unstructured key value map stored with a
            resource that may be set by external tools to store and retrieve arbitrary
            metadata. They are not queryable and should be preserved when modifying
            objects. More info: http://kubernetes.io/docs/user-guide/annotations'
          type: object
        clusterName:
          description: The name of the cluster which the object belongs to. This is
            used to distinguish resources with same name and namespace in different
            clusters. This field is not set anywhere right now and apiserver is going
            to ignore it if set in create or update request.
          type: string
        creationTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
          default: {}
          description: |-
            CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        deletionGracePeriodSeconds:
          description: Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when deletionTimestamp
            is also set. May only be shortened. Read-only.
          format: int64
          type: integer
        deletionTimestamp:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
          description: |-
            DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

            Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        finalizers:
          description: Must be empty before the object is deleted from the registry.
            Each entry is an identifier for the responsible component that will remove
            the entry from the list. If the deletionTimestamp of the object is non-nil,
            entries in this list can only be removed. Finalizers may be processed
            and removed in any order.  Order is NOT enforced because it introduces
            significant risk of stuck finalizers. finalizers is a shared field, any
            actor with permission can reorder it. If the finalizer list is processed
            in order, then this can lead to a situation in which the component responsible
            for the first finalizer in the list is waiting for a signal (field value,
            external system, or other) produced by a component responsible for a finalizer
            later in the list, resulting in a deadlock. Without enforced ordering
            finalizers are free to order amongst themselves and are not vulnerable
            to ordering changes in the list.
          items:
            default: ""
            type: string
          type: array
          x-kubernetes-patch-strategy: merge
        generateName:
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          type: string
        generation:
          description: A sequence number representing a specific generation of the
            desired state. Populated by the system. Read-only.
          format: int64
          type: integer
        labels:
          additionalProperties:
            default: ""
            type: string
          description: 'Map of string keys and values that can be used to organize
            and categorize (scope and select) objects. May match selectors of replication
            controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
          type: object
        managedFields:
          description: ManagedFields maps workflow-id and version to the set of fields
            that are managed by that workflow. This is mostly for internal housekeeping,
            and users typically shouldn't need to set or understand this field. A
            workflow can be the user's name, a controller's name, or the name of a
            specific apply path like "ci-cd". The set of fields is always in the version
            that the workflow used when modifying the object.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
            default: {}
          type: array
        name:
          description: 'Name must be unique within a namespace. Is required when creating
            resources, although some resources may allow a client to request the generation
            of an appropriate name automatically. Name is primarily intended for creation
            idempotence and configuration definition. Cannot be updated. More info:
            http://kubernetes.io/docs/user-guide/identifiers#names'
          type: string
        namespace:
          description: |-
            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
          type: string
        ownerReferences:
          description: List of objects depended by this object. If ALL objects in
            the list have been deleted, this object will be garbage collected. If
            this object is managed by a controller, then an entry in this list will
            point to this controller, with the controller field set to true. There
            cannot be more than one managing controller.
          items:
            $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference'
            default: {}
          type: array
          x-kubernetes-patch-merge-key: uid
          x-kubernetes-patch-strategy: merge
        resourceVersion:
          description: |-
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          type: string
        selfLink:
          description: |-
            SelfLink is a URL representing this object. Populated by the system. Read-only.

            DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
          type: string
        uid:
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
          type: string
      type: object
    k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference:
      description: OwnerReference contains enough information to let you identify
        an owning object. An owning object must be in the same namespace as the dependent,
        or be cluster-scoped, so there is no namespace field.
      properties:
        apiVersion:
          default: ""
          description: API version of the referent.
          type: string
        blockOwnerDeletion:
          description: If true, AND if the owner has the "foregroundDeletion" finalizer,
            then the owner cannot be deleted from the key-value store until this reference
            is removed. Defaults to false. To set this field, a user needs "delete"
            permission of the owner, otherwise 422 (Unprocessable Entity) will be
            returned.
          type: boolean
        controller:
          description: If true, this reference points to the managing controller.
          type: boolean
        kind:
          default: ""
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          default: ""
          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
          type: string
        uid:
          default: ""
          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string
      required:
      - apiVersion
      - kind
      - name
      - uid
      type: object
      x-kubernetes-map-type: atomic
    k8s.io.apimachinery.pkg.apis.meta.v1.Time:
      description: Time is a wrapper around time.Time which supports correct marshaling
        to YAML and JSON.  Wrappers are provided for many of the factory methods that
        the time package offers.
      format: date-time
      type: string
    k8s.io.apimachinery.pkg.runtime.RawExtension:
      description: "RawExtension is used to hold extensions in external versions.\n\nTo
        use this, make a field which has RawExtension as its type in your external,
        versioned struct, and Object in your internal struct. You also need to register
        your various plugin types.\n\n// Internal package: type MyAPIObject struct
        {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n}
        type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External
        package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin
        runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption
        string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something
        like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\":
        {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what
        happens? Decode first uses json or yaml to unmarshal the serialized data into
        your external MyAPIObject. That causes the raw JSON to be stored, but not
        unpacked. The next step is to copy (using pkg/conversion) into the internal
        struct. The runtime package's DefaultScheme has conversion functions installed
        which will unpack the JSON stored in RawExtension, turning it into the correct
        object type, and storing it in the Object. (TODO: In the case where the object
        is of an unknown type, a runtime.Unknown object will be created and stored.)"
      type: object
    k8s.io.apimachinery.pkg.util.intstr.IntOrString:
      description: IntOrString is a type that can hold an int32 or a string.  When
        used in JSON or YAML marshalling and unmarshalling, it produces or consumes
        the inner type.  This allows you to have, for example, a JSON field that can
        accept a name or number.
      format: int-or-string
      oneOf:
      - type: integer
      - type: string
      x-kubernetes-v2-schema:
        description: IntOrString is a type that can hold an int32 or a string.  When
          used in JSON or YAML marshalling and unmarshalling, it produces or consumes
          the inner type.  This allows you to have, for example, a JSON field that
          can accept a name or number.
        format: int-or-string
        type: string
    sigs.k8s.io.cluster-api.api.v1beta1.APIEndpoint:
      description: APIEndpoint represents a reachable Kubernetes API endpoint.
      properties:
        host:
          default: ""
          description: The hostname on which the API server is serving.
          type: string
        port:
          default: 0
          description: The port on which the API server is serving.
          format: int32
          type: integer
      required:
      - host
      - port
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.Cluster:
      description: Cluster is the Schema for the clusters API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta'
          default: {}
        spec:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ClusterSpec'
          default: {}
        status:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ClusterStatus'
          default: {}
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ClusterClassVariable:
      description: ClusterClassVariable defines a variable which can be configured
        in the Cluster topology and used in patches.
      properties:
        name:
          default: ""
          description: Name of the variable.
          type: string
        required:
          default: false
          description: 'Required specifies if the variable is required. Note: this
            applies to the variable as a whole and thus the top-level object defined
            in the schema. If nested fields are required, this will be specified inside
            the schema.'
          type: boolean
        schema:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.VariableSchema'
          default: {}
          description: Schema defines the schema of the variable.
      required:
      - name
      - required
      - schema
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ClusterNetwork:
      description: ClusterNetwork specifies the different networking parameters for
        a cluster.
      properties:
        apiServerPort:
          description: APIServerPort specifies the port the API Server should bind
            to. Defaults to 6443.
          format: int32
          type: integer
        pods:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.NetworkRanges'
          description: The network ranges from which Pod networks are allocated.
        serviceDomain:
          description: Domain name for services.
          type: string
        services:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.NetworkRanges'
          description: The network ranges from which service VIPs are allocated.
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ClusterSpec:
      description: ClusterSpec defines the desired state of Cluster.
      properties:
        clusterNetwork:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ClusterNetwork'
          description: Cluster network configuration.
        controlPlaneEndpoint:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.APIEndpoint'
          default: {}
          description: ControlPlaneEndpoint represents the endpoint used to communicate
            with the control plane.
        controlPlaneRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ObjectReference'
          description: ControlPlaneRef is an optional reference to a provider-specific
            resource that holds the details for provisioning the Control Plane for
            a Cluster.
        infrastructureRef:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ObjectReference'
          description: InfrastructureRef is a reference to a provider-specific resource
            that holds the details for provisioning infrastructure for a cluster in
            said provider.
        paused:
          description: Paused can be used to prevent controllers from processing the
            Cluster and all its associated objects.
          type: boolean
        topology:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Topology'
          description: 'This encapsulates the topology for the cluster. NOTE: It is
            required to enable the ClusterTopology feature gate flag to activate managed
            topologies support; this feature is highly experimental, and parts of
            it might still be not implemented.'
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ClusterStatus:
      description: ClusterStatus defines the observed state of Cluster.
      properties:
        conditions:
          description: Conditions defines current service state of the cluster.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Condition'
            default: {}
          type: array
        controlPlaneReady:
          default: false
          description: ControlPlaneReady defines if the control plane is ready.
          type: boolean
        failureDomains:
          additionalProperties:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.FailureDomainSpec'
            default: {}
          description: FailureDomains is a slice of failure domain objects synced
            from the infrastructure provider.
          type: object
        failureMessage:
          description: FailureMessage indicates that there is a fatal problem reconciling
            the state, and will be set to a descriptive error message.
          type: string
        failureReason:
          description: FailureReason indicates that there is a fatal problem reconciling
            the state, and will be set to a token value suitable for programmatic
            interpretation.
          type: string
        infrastructureReady:
          default: false
          description: InfrastructureReady is the state of the infrastructure provider.
          type: boolean
        observedGeneration:
          description: ObservedGeneration is the latest generation observed by the
            controller.
          format: int64
          type: integer
        phase:
          description: Phase represents the current phase of cluster actuation. E.g.
            Pending, Running, Terminating, Failed etc.
          type: string
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ClusterVariable:
      description: ClusterVariable can be used to customize the Cluster through patches.
        Each ClusterVariable is associated with a Variable definition in the ClusterClass
        `status` variables.
      properties:
        definitionFrom:
          description: 'DefinitionFrom specifies where the definition of this Variable
            is from. DefinitionFrom is `inline` when the definition is from the ClusterClass
            `.spec.variables` or the name of a patch defined in the ClusterClass `.spec.patches`
            where the patch is external and provides external variables. This field
            is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass
            `status.variables[]`'
          type: string
        name:
          default: ""
          description: Name of the variable.
          type: string
        value:
          $ref: '#/components/schemas/k8s.io.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
          default: {}
          description: 'Value of the variable. Note: the value will be validated against
            the schema of the corresponding ClusterClassVariable from the ClusterClass.
            Note: We have to use apiextensionsv1.JSON instead of a custom JSON type,
            because controller-tools has a hard-coded schema for apiextensionsv1.JSON
            which cannot be produced by another type via controller-tools, i.e. it
            is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
      required:
      - name
      - value
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.Condition:
      description: Condition defines an observation of a Cluster API resource operational
        state.
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
          default: {}
          description: Last time the condition transitioned from one status to another.
            This should be when the underlying condition changed. If that is not known,
            then using the time when the API field changed is acceptable.
        message:
          description: A human readable message indicating details about the transition.
            This field may be empty.
          type: string
        reason:
          description: The reason for the condition's last transition in CamelCase.
            The specific API may choose whether or not this field is considered a
            guaranteed API. This field may not be empty.
          type: string
        severity:
          description: Severity provides an explicit classification of Reason code,
            so the users or machines can immediately understand the current situation
            and act accordingly. The Severity field MUST be set only when Status=False.
          type: string
        status:
          default: ""
          description: Status of the condition, one of True, False, Unknown.
          type: string
        type:
          default: ""
          description: Type of condition in CamelCase or in foo.example.com/CamelCase.
            Many .condition.type values are consistent across resources like Available,
            but because arbitrary conditions can be useful (see .node.status.conditions),
            the ability to deconflict is important.
          type: string
      required:
      - type
      - status
      - lastTransitionTime
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ControlPlaneTopology:
      description: ControlPlaneTopology specifies the parameters for the control plane
        nodes in the cluster.
      properties:
        machineHealthCheck:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.MachineHealthCheckTopology'
          description: MachineHealthCheck allows to enable, disable and override the
            MachineHealthCheck configuration in the ClusterClass for this control
            plane.
        metadata:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ObjectMeta'
          default: {}
          description: Metadata is the metadata applied to the ControlPlane and the
            Machines of the ControlPlane if the ControlPlaneTemplate referenced by
            the ClusterClass is machine based. If not, it is applied only to the ControlPlane.
            At runtime this metadata is merged with the corresponding metadata from
            the ClusterClass.
        nodeDeletionTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: NodeDeletionTimeout defines how long the controller will attempt
            to delete the Node that the Machine hosts after the Machine is marked
            for deletion. A duration of 0 will retry deletion indefinitely. Defaults
            to 10 seconds.
        nodeDrainTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: 'NodeDrainTimeout is the total amount of time that the controller
            will spend on draining a node. The default value is 0, meaning that the
            node can be drained without any time limitations. NOTE: NodeDrainTimeout
            is different from `kubectl drain --timeout`'
        nodeVolumeDetachTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: NodeVolumeDetachTimeout is the total amount of time that the
            controller will spend on waiting for all volumes to be detached. The default
            value is 0, meaning that the volumes can be detached without any time
            limitations.
        replicas:
          description: Replicas is the number of control plane nodes. If the value
            is nil, the ControlPlane object is created without the number of Replicas
            and it's assumed that the control plane controller does not implement
            support for this field. When specified against a control plane provider
            that lacks support for this field, this value will be ignored.
          format: int32
          type: integer
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.FailureDomainSpec:
      description: FailureDomainSpec is the Schema for Cluster API failure domains.
        It allows controllers to understand how many failure domains a cluster can
        optionally span across.
      properties:
        attributes:
          additionalProperties:
            default: ""
            type: string
          description: Attributes is a free form map of attributes an infrastructure
            provider might use or require.
          type: object
        controlPlane:
          description: ControlPlane determines if this failure domain is suitable
            for use by control plane machines.
          type: boolean
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.JSONSchemaProps:
      description: JSONSchemaProps is a JSON-Schema following Specification Draft
        4 (http://json-schema.org/). This struct has been initially copied from apiextensionsv1.JSONSchemaProps,
        but all fields which are not supported in CAPI have been removed.
      properties:
        additionalProperties:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.JSONSchemaProps'
          description: 'AdditionalProperties specifies the schema of values in a map
            (keys are always strings). NOTE: Can only be set if type is object. NOTE:
            AdditionalProperties is mutually exclusive with Properties. NOTE: This
            field uses PreserveUnknownFields and Schemaless, because recursive validation
            is not possible.'
        default:
          $ref: '#/components/schemas/k8s.io.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
          description: 'Default is the default value of the variable. NOTE: Can be
            set for all types.'
        description:
          description: Description is a human-readable description of this variable.
          type: string
        enum:
          description: 'Enum is the list of valid values of the variable. NOTE: Can
            be set for all types.'
          items:
            $ref: '#/components/schemas/k8s.io.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
            default: {}
          type: array
        example:
          $ref: '#/components/schemas/k8s.io.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
          description: Example is an example for this variable.
        exclusiveMaximum:
          description: 'ExclusiveMaximum specifies if the Maximum is exclusive. NOTE:
            Can only be set if type is integer or number.'
          type: boolean
        exclusiveMinimum:
          description: 'ExclusiveMinimum specifies if the Minimum is exclusive. NOTE:
            Can only be set if type is integer or number.'
          type: boolean
        format:
          description: 'Format is an OpenAPI v3 format string. Unknown formats are
            ignored. For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver
            version we''re currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go
            NOTE: Can only be set if type is string.'
          type: string
        items:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.JSONSchemaProps'
          description: 'Items specifies fields of an array. NOTE: Can only be set
            if type is array. NOTE: This field uses PreserveUnknownFields and Schemaless,
            because recursive validation is not possible.'
        maxItems:
          description: 'MaxItems is the max length of an array variable. NOTE: Can
            only be set if type is array.'
          format: int64
          type: integer
        maxLength:
          description: 'MaxLength is the max length of a string variable. NOTE: Can
            only be set if type is string.'
          format: int64
          type: integer
        maximum:
          description: 'Maximum is the maximum of an integer or number variable. If
            ExclusiveMaximum is false, the variable is valid if it is lower than,
            or equal to, the value of Maximum. If ExclusiveMaximum is true, the variable
            is valid if it is strictly lower than the value of Maximum. NOTE: Can
            only be set if type is integer or number.'
          format: int64
          type: integer
        minItems:
          description: 'MinItems is the min length of an array variable. NOTE: Can
            only be set if type is array.'
          format: int64
          type: integer
        minLength:
          description: 'MinLength is the min length of a string variable. NOTE: Can
            only be set if type is string.'
          format: int64
          type: integer
        minimum:
          description: 'Minimum is the minimum of an integer or number variable. If
            ExclusiveMinimum is false, the variable is valid if it is greater than,
            or equal to, the value of Minimum. If ExclusiveMinimum is true, the variable
            is valid if it is strictly greater than the value of Minimum. NOTE: Can
            only be set if type is integer or number.'
          format: int64
          type: integer
        pattern:
          description: 'Pattern is the regex which a string variable must match. NOTE:
            Can only be set if type is string.'
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.JSONSchemaProps'
            default: {}
          description: 'Properties specifies fields of an object. NOTE: Can only be
            set if type is object. NOTE: Properties is mutually exclusive with AdditionalProperties.
            NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive
            validation is not possible.'
          type: object
        required:
          description: 'Required specifies which fields of an object are required.
            NOTE: Can only be set if type is object.'
          items:
            default: ""
            type: string
          type: array
        type:
          default: ""
          description: 'Type is the type of the variable. Valid values are: object,
            array, string, integer, number or boolean.'
          type: string
        uniqueItems:
          description: 'UniqueItems specifies if items in an array must be unique.
            NOTE: Can only be set if type is array.'
          type: boolean
        x-kubernetes-preserve-unknown-fields:
          description: XPreserveUnknownFields allows setting fields in a variable
            object which are not defined in the variable schema. This affects fields
            recursively, except if nested properties or additionalProperties are specified
            in the schema.
          type: boolean
      required:
      - type
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.MachineDeploymentStrategy:
      description: MachineDeploymentStrategy describes how to replace existing machines
        with new ones.
      properties:
        rollingUpdate:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.MachineRollingUpdateDeployment'
          description: Rolling update config params. Present only if MachineDeploymentStrategyType
            = RollingUpdate.
        type:
          description: Type of deployment. Default is RollingUpdate.
          type: string
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.MachineDeploymentTopology:
      description: MachineDeploymentTopology specifies the different parameters for
        a set of worker nodes in the topology. This set of nodes is managed by a MachineDeployment
        object whose lifecycle is managed by the Cluster controller.
      properties:
        class:
          default: ""
          description: Class is the name of the MachineDeploymentClass used to create
            the set of worker nodes. This should match one of the deployment classes
            defined in the ClusterClass object mentioned in the `Cluster.Spec.Class`
            field.
          type: string
        failureDomain:
          description: FailureDomain is the failure domain the machines will be created
            in. Must match a key in the FailureDomains map stored on the cluster object.
          type: string
        machineHealthCheck:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.MachineHealthCheckTopology'
          description: MachineHealthCheck allows to enable, disable and override the
            MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.
        metadata:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ObjectMeta'
          default: {}
          description: Metadata is the metadata applied to the MachineDeployment and
            the machines of the MachineDeployment. At runtime this metadata is merged
            with the corresponding metadata from the ClusterClass.
        minReadySeconds:
          description: Minimum number of seconds for which a newly created machine
            should be ready. Defaults to 0 (machine will be considered available as
            soon as it is ready)
          format: int32
          type: integer
        name:
          default: ""
          description: Name is the unique identifier for this MachineDeploymentTopology.
            The value is used with other unique identifiers to create a MachineDeployment's
            Name (e.g. cluster's name, etc). In case the name is greater than the
            allowed maximum length, the values are hashed together.
          type: string
        nodeDeletionTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: NodeDeletionTimeout defines how long the controller will attempt
            to delete the Node that the Machine hosts after the Machine is marked
            for deletion. A duration of 0 will retry deletion indefinitely. Defaults
            to 10 seconds.
        nodeDrainTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: 'NodeDrainTimeout is the total amount of time that the controller
            will spend on draining a node. The default value is 0, meaning that the
            node can be drained without any time limitations. NOTE: NodeDrainTimeout
            is different from `kubectl drain --timeout`'
        nodeVolumeDetachTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: NodeVolumeDetachTimeout is the total amount of time that the
            controller will spend on waiting for all volumes to be detached. The default
            value is 0, meaning that the volumes can be detached without any time
            limitations.
        replicas:
          description: Replicas is the number of worker nodes belonging to this set.
            If the value is nil, the MachineDeployment is created without the number
            of Replicas (defaulting to 1) and it's assumed that an external entity
            (like cluster autoscaler) is responsible for the management of this value.
          format: int32
          type: integer
        strategy:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.MachineDeploymentStrategy'
          description: The deployment strategy to use to replace existing machines
            with new ones.
        variables:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.MachineDeploymentVariables'
          description: Variables can be used to customize the MachineDeployment through
            patches.
      required:
      - class
      - name
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.MachineDeploymentVariables:
      description: MachineDeploymentVariables can be used to provide variables for
        a specific MachineDeployment.
      properties:
        overrides:
          description: Overrides can be used to override Cluster level variables.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ClusterVariable'
            default: {}
          type: array
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.MachineHealthCheckTopology:
      description: MachineHealthCheckTopology defines a MachineHealthCheck for a group
        of machines.
      properties:
        enable:
          description: |-
            Enable controls if a MachineHealthCheck should be created for the target machines.

            If false: No MachineHealthCheck will be created.

            If not set(default): A MachineHealthCheck will be created if it is defined here or
             in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.

            If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will block if `enable` is true and no MachineHealthCheck definition is available.
          type: boolean
        maxUnhealthy:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
          description: Any further remediation is only allowed if at most "MaxUnhealthy"
            machines selected by "selector" are not healthy.
        nodeStartupTimeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          description: Machines older than this duration without a node will be considered
            to have failed and will be remediated. If you wish to disable this feature,
            set the value explicitly to 0.
        remediationTemplate:
          $ref: '#/components/schemas/k8s.io.api.core.v1.ObjectReference'
          description: |-
            RemediationTemplate is a reference to a remediation template provided by an infrastructure provider.

            This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
        unhealthyConditions:
          description: UnhealthyConditions contains a list of the conditions that
            determine whether a node is considered unhealthy. The conditions are combined
            in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.UnhealthyCondition'
            default: {}
          type: array
        unhealthyRange:
          description: 'Any further remediation is only allowed if the number of machines
            selected by "selector" as not healthy is within the range of "UnhealthyRange".
            Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation
            will be allowed only when: (a) there are at least 3 unhealthy machines
            (and) (b) there are at most 5 unhealthy machines'
          type: string
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.MachineRollingUpdateDeployment:
      description: MachineRollingUpdateDeployment is used to control the desired behavior
        of rolling update.
      properties:
        deletePolicy:
          description: DeletePolicy defines the policy used by the MachineDeployment
            to identify nodes to delete when downscaling. Valid values are "Random,
            "Newest", "Oldest" When no value is supplied, the default DeletePolicy
            of MachineSet is used
          type: string
        maxSurge:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
          description: 'The maximum number of machines that can be scheduled above
            the desired number of machines. Value can be an absolute number (ex: 5)
            or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable
            is 0. Absolute number is calculated from percentage by rounding up. Defaults
            to 1. Example: when this is set to 30%, the new MachineSet can be scaled
            up immediately when the rolling update starts, such that the total number
            of old and new machines do not exceed 130% of desired machines. Once old
            machines have been killed, new MachineSet can be scaled up further, ensuring
            that total number of machines running at any time during the update is
            at most 130% of desired machines.'
        maxUnavailable:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.util.intstr.IntOrString'
          description: 'The maximum number of machines that can be unavailable during
            the update. Value can be an absolute number (ex: 5) or a percentage of
            desired machines (ex: 10%). Absolute number is calculated from percentage
            by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example:
            when this is set to 30%, the old MachineSet can be scaled down to 70%
            of desired machines immediately when the rolling update starts. Once new
            machines are ready, old MachineSet can be scaled down further, followed
            by scaling up the new MachineSet, ensuring that the total number of machines
            available at all times during the update is at least 70% of desired machines.'
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.NetworkRanges:
      description: NetworkRanges represents ranges of network addresses.
      properties:
        cidrBlocks:
          items:
            default: ""
            type: string
          type: array
      required:
      - cidrBlocks
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.ObjectMeta:
      description: |-
        ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta.

        ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience.

        During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package.

        In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable.

        In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
      properties:
        annotations:
          additionalProperties:
            default: ""
            type: string
          description: 'Annotations is an unstructured key value map stored with a
            resource that may be set by external tools to store and retrieve arbitrary
            metadata. They are not queryable and should be preserved when modifying
            objects. More info: http://kubernetes.io/docs/user-guide/annotations'
          type: object
        labels:
          additionalProperties:
            default: ""
            type: string
          description: 'Map of string keys and values that can be used to organize
            and categorize (scope and select) objects. May match selectors of replication
            controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
          type: object
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.Topology:
      description: Topology encapsulates the information of the managed resources.
      properties:
        class:
          default: ""
          description: The name of the ClusterClass object to create the topology.
          type: string
        controlPlane:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ControlPlaneTopology'
          default: {}
          description: ControlPlane describes the cluster control plane.
        rolloutAfter:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Time'
          description: 'RolloutAfter performs a rollout of the entire cluster one
            component at a time, control plane first and then machine deployments.
            Deprecated: This field has no function and is going to be removed in the
            next apiVersion.'
        variables:
          description: Variables can be used to customize the Cluster through patches.
            They must comply to the corresponding VariableClasses defined in the ClusterClass.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ClusterVariable'
            default: {}
          type: array
        version:
          default: ""
          description: The Kubernetes version of the cluster.
          type: string
        workers:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.WorkersTopology'
          description: Workers encapsulates the different constructs that form the
            worker nodes for the cluster.
      required:
      - class
      - version
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.UnhealthyCondition:
      description: UnhealthyCondition represents a Node condition type and value with
        a timeout specified as a duration.  When the named condition has been in the
        given status for at least the timeout value, a node is considered unhealthy.
      properties:
        status:
          default: ""
          type: string
        timeout:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.apis.meta.v1.Duration'
          default: 0
        type:
          default: ""
          type: string
      required:
      - type
      - status
      - timeout
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.VariableSchema:
      description: VariableSchema defines the schema of a variable.
      properties:
        openAPIV3Schema:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.JSONSchemaProps'
          default: {}
          description: OpenAPIV3Schema defines the schema of a variable via OpenAPI
            v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
      required:
      - openAPIV3Schema
      type: object
    sigs.k8s.io.cluster-api.api.v1beta1.WorkersTopology:
      description: WorkersTopology represents the different sets of worker nodes in
        the cluster.
      properties:
        machineDeployments:
          description: MachineDeployments is a list of machine deployments in the
            cluster.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.MachineDeploymentTopology'
            default: {}
          type: array
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterClusterUpgradeRequest:
      description: AfterClusterUpgradeRequest is the request of the AfterClusterUpgrade
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        cluster:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Cluster'
          default: {}
          description: Cluster is the cluster object the lifecycle hook corresponds
            to.
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        kubernetesVersion:
          default: ""
          description: KubernetesVersion is the Kubernetes version after upgrade.
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
      required:
      - cluster
      - kubernetesVersion
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterClusterUpgradeResponse:
      description: AfterClusterUpgradeResponse is the response of the AfterClusterUpgrade
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneInitializedRequest:
      description: AfterControlPlaneInitializedRequest is the request of the AfterControlPlaneInitialized
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        cluster:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Cluster'
          default: {}
          description: Cluster is the cluster object the lifecycle hook corresponds
            to.
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
      required:
      - cluster
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneInitializedResponse:
      description: AfterControlPlaneInitializedResponse is the response of the AfterControlPlaneInitialized
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneUpgradeRequest:
      description: AfterControlPlaneUpgradeRequest is the request of the AfterControlPlaneUpgrade
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        cluster:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Cluster'
          default: {}
          description: Cluster is the cluster object the lifecycle hook corresponds
            to.
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        kubernetesVersion:
          default: ""
          description: KubernetesVersion is the Kubernetes version of the Control
            Plane after the upgrade.
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
      required:
      - cluster
      - kubernetesVersion
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneUpgradeResponse:
      description: AfterControlPlaneUpgradeResponse is the response of the AfterControlPlaneUpgrade
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        retryAfterSeconds:
          default: 0
          description: RetryAfterSeconds when set to a non-zero value signifies that
            the hook will be called again at a future time.
          format: int32
          type: integer
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      - retryAfterSeconds
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterCreateRequest:
      description: BeforeClusterCreateRequest is the request of the BeforeClusterCreate
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        cluster:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Cluster'
          default: {}
          description: Cluster is the cluster object the lifecycle hook corresponds
            to.
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
      required:
      - cluster
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterCreateResponse:
      description: BeforeClusterCreateResponse is the response of the BeforeClusterCreate
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        retryAfterSeconds:
          default: 0
          description: RetryAfterSeconds when set to a non-zero value signifies that
            the hook will be called again at a future time.
          format: int32
          type: integer
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      - retryAfterSeconds
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterDeleteRequest:
      description: BeforeClusterDeleteRequest is the request of the BeforeClusterDelete
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        cluster:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Cluster'
          default: {}
          description: Cluster is the cluster object the lifecycle hook corresponds
            to.
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
      required:
      - cluster
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterDeleteResponse:
      description: BeforeClusterDeleteResponse is the response of the BeforeClusterDelete
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        retryAfterSeconds:
          default: 0
          description: RetryAfterSeconds when set to a non-zero value signifies that
            the hook will be called again at a future time.
          format: int32
          type: integer
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      - retryAfterSeconds
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterUpgradeRequest:
      description: BeforeClusterUpgradeRequest is the request of the BeforeClusterUpgrade
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        cluster:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.Cluster'
          default: {}
          description: Cluster is the cluster object the lifecycle hook corresponds
            to.
        fromKubernetesVersion:
          default: ""
          description: FromKubernetesVersion is the current Kubernetes version of
            the cluster.
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
        toKubernetesVersion:
          default: ""
          description: ToKubernetesVersion is the target Kubernetes version of the
            upgrade.
          type: string
      required:
      - cluster
      - fromKubernetesVersion
      - toKubernetesVersion
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterUpgradeResponse:
      description: BeforeClusterUpgradeResponse is the response of the BeforeClusterUpgrade
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        retryAfterSeconds:
          default: 0
          description: RetryAfterSeconds when set to a non-zero value signifies that
            the hook will be called again at a future time.
          format: int32
          type: integer
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      - retryAfterSeconds
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoverVariablesRequest:
      description: DiscoverVariablesRequest is the request of the DiscoverVariables
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoverVariablesResponse:
      description: DiscoverVariablesResponse is the response of the DiscoverVariables
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
        variables:
          description: Variables are variable schemas for variables defined by the
            DiscoverVariables hook.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.api.v1beta1.ClusterClassVariable'
            default: {}
          type: array
      required:
      - status
      - message
      - variables
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoveryRequest:
      description: DiscoveryRequest is the request of the Discovery hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoveryResponse:
      description: DiscoveryResponse is the response of the Discovery hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        handlers:
          description: Handlers defines the current ExtensionHandlers supported by
            an Extension.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ExtensionHandler'
            default: {}
          type: array
          x-kubernetes-list-map-keys:
          - name
          x-kubernetes-list-type: map
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      - handlers
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ExtensionHandler:
      description: ExtensionHandler represents the discovery information for an extension
        handler which includes the hook it supports.
      properties:
        failurePolicy:
          description: FailurePolicy defines how failures in calls to the ExtensionHandler
            should be handled by a client. This is defaulted to FailurePolicyFail
            if not defined.
          type: string
        name:
          default: ""
          description: Name is the name of the ExtensionHandler.
          type: string
        requestHook:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GroupVersionHook'
          default: {}
          description: RequestHook defines the versioned runtime hook which this ExtensionHandler
            serves.
        timeoutSeconds:
          description: TimeoutSeconds defines the timeout duration for client calls
            to the ExtensionHandler. This is defaulted to 10 if left undefined.
          format: int32
          type: integer
      required:
      - name
      - requestHook
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesRequest:
      description: GeneratePatchesRequest is the request of the GeneratePatches hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: Items is the list of templates to generate patches for.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesRequestItem'
            default: {}
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
        variables:
          description: Variables are global variables for all templates.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.Variable'
            default: {}
          type: array
      required:
      - variables
      - items
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesRequestItem:
      description: GeneratePatchesRequestItem represents a template to generate patches
        for.
      properties:
        holderReference:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.HolderReference'
          default: {}
          description: HolderReference is a reference to the object where the template
            is used.
        object:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.runtime.RawExtension'
          default: {}
          description: Object contains the template as a raw object.
        uid:
          default: ""
          description: UID is an identifier for this template. It allows us to correlate
            the template in the request with the corresponding generated patches in
            the response.
          type: string
        variables:
          description: Variables are variables specific for the current template.
            For example some builtin variables like MachineDeployment replicas and
            version are context-sensitive and thus are only added to templates for
            MachineDeployments and with values which correspond to the current MachineDeployment.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.Variable'
            default: {}
          type: array
      required:
      - uid
      - holderReference
      - object
      - variables
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesResponse:
      description: 'GeneratePatchesResponse is the response of the GeneratePatches
        hook. NOTE: The patches in GeneratePatchesResponse will be applied in the
        order in which they are defined to the templates of the request. Thus applying
        changes consecutively when iterating through internal and external patches.'
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: Items is the list of generated patches.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesResponseItem'
            default: {}
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      - items
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesResponseItem:
      description: GeneratePatchesResponseItem is a generated patch.
      properties:
        patch:
          description: Patch contains the patch which should be applied to the template.
            It must be of the corresponding PatchType.
          format: byte
          type: string
        patchType:
          default: ""
          description: |-
            PatchType defines the type of the patch. One of: "JSONPatch" or "JSONMergePatch".

            Possible enum values:
             - `"JSONMergePatch"` identifies a https://datatracker.ietf.org/doc/html/rfc7386 JSON merge patch.
             - `"JSONPatch"` identifies a https://datatracker.ietf.org/doc/html/rfc6902 JSON patch.
          enum:
          - JSONMergePatch
          - JSONPatch
          type: string
        uid:
          default: ""
          description: UID identifies the corresponding template in the request on
            which the patch should be applied.
          type: string
      required:
      - uid
      - patchType
      - patch
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GroupVersionHook:
      description: GroupVersionHook defines the runtime hook when the ExtensionHandler
        is called.
      properties:
        apiVersion:
          default: ""
          description: APIVersion is the group and version of the Hook
          type: string
        hook:
          default: ""
          description: Hook is the name of the hook
          type: string
      required:
      - apiVersion
      - hook
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.HolderReference:
      description: HolderReference represents a reference to an object which holds
        a template.
      properties:
        apiVersion:
          default: ""
          description: API version of the referent.
          type: string
        fieldPath:
          default: ""
          description: FieldPath is the path to the field of the object which references
            the template.
          type: string
        kind:
          default: ""
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          default: ""
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        namespace:
          default: ""
          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
          type: string
      required:
      - apiVersion
      - kind
      - namespace
      - name
      - fieldPath
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ValidateTopologyRequest:
      description: ValidateTopologyRequest is the request of the ValidateTopology
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: Items is the list of templates to validate.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ValidateTopologyRequestItem'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        settings:
          additionalProperties:
            default: ""
            type: string
          description: Settings defines key value pairs to be passed to the call.
          type: object
        variables:
          description: Variables are global variables for all templates.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.Variable'
            default: {}
          type: array
      required:
      - variables
      - items
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ValidateTopologyRequestItem:
      description: ValidateTopologyRequestItem represents a template to validate.
      properties:
        holderReference:
          $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.HolderReference'
          default: {}
          description: HolderReference is a reference to the object where the template
            is used.
        object:
          $ref: '#/components/schemas/k8s.io.apimachinery.pkg.runtime.RawExtension'
          default: {}
          description: Object contains the template as a raw object.
        variables:
          description: Variables are variables specific for the current template.
            For example some builtin variables like MachineDeployment replicas and
            version are context-sensitive and thus are only added to templates for
            MachineDeployments and with values which correspond to the current MachineDeployment.
          items:
            $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.Variable'
            default: {}
          type: array
      required:
      - holderReference
      - object
      - variables
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ValidateTopologyResponse:
      description: ValidateTopologyResponse is the response of the ValidateTopology
        hook.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          default: ""
          description: A human-readable description of the status of the call.
          type: string
        status:
          default: ""
          description: |-
            Status of the call. One of "Success" or "Failure".

            Possible enum values:
             - `"Failure"` represents a failure response.
             - `"Success"` represents a success response.
          enum:
          - Failure
          - Success
          type: string
      required:
      - status
      - message
      type: object
    sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.Variable:
      description: Variable represents a variable value.
      properties:
        name:
          default: ""
          description: Name of the variable.
          type: string
        value:
          $ref: '#/components/schemas/k8s.io.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
          default: {}
          description: Value of the variable.
      required:
      - name
      - value
      type: object
info:
  description: |-
    This document defines the Open API specification of the services that Cluster API runtime is going to call while managing the Cluster's lifecycle.

    Services described in this specification are also referred to as Runtime Hooks, given that they allow external components to hook-in the cluster's lifecycle. The corresponding components implementing handlers for Runtime Hooks calls are referred to as Runtime Extensions.

    More information is available in the [Cluster API book](https://cluster-api.sigs.k8s.io/).
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Cluster API - Runtime SDK
  version: v1.4.0
openapi: 3.0.0
paths:
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/afterclusterupgrade/{name}:
    post:
      description: "Cluster API Runtime will call this hook after a Cluster has been
        upgraded to the version specified in spec.topology.version. An upgrade is
        completed when all control plane and MachineDeployment's Machines have been
        upgraded.\n\nNotes:\n- This hook will be called only for Clusters with a managed
        topology\n- The call's request contains the Cluster object and the Kubernetes
        version we upgraded to \n- This is a non-blocking hook"
      operationId: hooksRuntimeClusterV1alpha1Afterclusterupgrade
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterClusterUpgradeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterClusterUpgradeResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook after a Cluster is upgraded
      tags:
      - Lifecycle Hooks
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/aftercontrolplaneinitialized/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook after the control plane for the Cluster is reachable for the first time.

        Notes:
        - This hook will be called only for Clusters with a managed topology
        - This is a non-blocking hook
      operationId: hooksRuntimeClusterV1alpha1Aftercontrolplaneinitialized
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneInitializedRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneInitializedResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook after the control plane is
        reachable for the first time
      tags:
      - Lifecycle Hooks
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/aftercontrolplaneupgrade/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook after the a cluster's control plane has been upgraded to the version specified in spec.topology.version, and immediately before the new version is going to be propagated to the MachineDeployments. A control plane upgrade is completed when all the machines in the control plane have been upgraded.

        Notes:
        - This hook will be called only for Clusters with a managed topology
        - The call's request contains the Cluster object and the Kubernetes version we upgraded to
        - This is a blocking hook; Runtime Extension implementers can use this hook to execute tasks before the new version is propagated to the MachineDeployments
      operationId: hooksRuntimeClusterV1alpha1Aftercontrolplaneupgrade
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneUpgradeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.AfterControlPlaneUpgradeResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook after the control plane is
        upgraded
      tags:
      - Lifecycle Hooks
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeclustercreate/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook after the Cluster is created by the user and immediately before all the objects which are part of a Cluster's topology are going to be created.

        Notes:
        - This hook will be called only for Clusters with a managed topology
        - The call's request contains the Cluster object
        - This is a blocking hook; Runtime Extension implementers can use this hook to execute
        tasks before the objects which are part of a Cluster's topology are created
      operationId: hooksRuntimeClusterV1alpha1Beforeclustercreate
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterCreateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterCreateResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook before a Cluster's topology
        is created
      tags:
      - Lifecycle Hooks
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeclusterdelete/{name}:
    post:
      description: "Cluster API Runtime will call this hook after the Cluster deletion
        has been triggered by the user, and immediately before objects of the Cluster
        are going to be deleted.\n\nNotes:\n- This hook will be called only for Clusters
        with a managed topology\n- The call's request contains the Cluster object
        \n- This is a blocking hook; Runtime Extension implementers can use this hook
        \ to execute tasks before objects of the Cluster are deleted"
      operationId: hooksRuntimeClusterV1alpha1Beforeclusterdelete
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterDeleteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterDeleteResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook before the Cluster is deleted
      tags:
      - Lifecycle Hooks
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/beforeclusterupgrade/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook after the Cluster object has been updated with a new spec.topology.version by the user, and immediately before the new version is propagated to the control plane.

        Notes:
        - This hook will be called only for Clusters with a managed topology
        - The call's request contains the Cluster object, the current Kubernetes version and the Kubernetes version we are upgrading to
        - This is a blocking hook; Runtime Extension implementers can use this hook to execute tasks before the new version is propagated to the control plane
      operationId: hooksRuntimeClusterV1alpha1Beforeclusterupgrade
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterUpgradeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.BeforeClusterUpgradeResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook before the Cluster is upgraded
      tags:
      - Lifecycle Hooks
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/discovervariables/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook when ClusterClass variables are being computed during the ClusterClass reconcile loop.Notes:
        - The response must contain the schemas of all variables defined by the patch.
      operationId: hooksRuntimeClusterV1alpha1Discovervariables
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoverVariablesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoverVariablesResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook when ClusterClass variables
        are being computed
      tags:
      - Topology Mutation Hook
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/discovery:
    post:
      description: |-
        Cluster API Runtime will call this hook when an ExtensionConfig is reconciled. Runtime Extension implementers must use this hook to inform the Cluster API runtime about all the handlers that are defined in an external component implementing Runtime Extensions.

        Notes:
        - When using Runtime SDK utils, a handler for this hook is automatically generated
      operationId: hooksRuntimeClusterV1alpha1Discovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoveryRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.DiscoveryResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook when an ExtensionConfig is
        reconciled
      tags:
      - Discovery
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/generatepatches/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook when a Cluster's topology is being computed during each topology controller reconcile loop. More specifically, this hook will be called while computing patches to be applied on top of templates derived from the Cluster's ClusterClass.

        Notes:
        - The call's request contains all templates, the global variables and the template-specific variables required to compute patches
        - The response must contain generated patches
      operationId: hooksRuntimeClusterV1alpha1Generatepatches
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.GeneratePatchesResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook when a Cluster's topology is
        being computed
      tags:
      - Topology Mutation Hook
  /hooks.runtime.cluster.x-k8s.io/v1alpha1/validatetopology/{name}:
    post:
      description: |-
        Cluster API Runtime will call this hook after a Cluster's topology has been computed during each topology controller reconcile loop. More specifically, this hook will be called after all patches have been applied to the templates derived from the Cluster's ClusterClass.

        Notes:
        - The call's request contains all templates, the global variables and the template-specific variables used while computing patches
        - The response must contain the result of the validation
      operationId: hooksRuntimeClusterV1alpha1Validatetopology
      parameters:
      - description: The handler name. Handlers within a single external component
          implementing Runtime Extensions must have different names
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ValidateTopologyRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sigs.k8s.io.cluster-api.exp.runtime.hooks.api.v1alpha1.ValidateTopologyResponse'
          description: Status code 200 indicates that the request has been processed
            successfully. Runtime Extension authors must use fields in the response
            like e.g. status and message to return processing outcomes.
      summary: Cluster API Runtime will call this hook after a Cluster's topology
        has been computed
      tags:
      - Topology Mutation Hook
