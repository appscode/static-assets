// Package hugo Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.json
// params.dev.json
// params.json
package hugo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xc1\x6e\xac\x30\x0c\xbc\xf3\x15\x51\xce\xfb\x1e\xed\x75\xbf\x61\x7b\xa9\xd4\x53\xb5\x07\x93\x98\x10\x11\x70\x94\x38\xbb\x6a\xab\xfd\xf7\x2a\x84\x00\xad\x7a\x22\x33\x1e\x8f\xc7\xe6\xab\x11\x42\x42\x8c\xc8\x51\x9e\x45\x46\x42\xc8\x80\x9e\xde\x5e\x2f\xf2\x2c\xe4\xc0\xec\xe3\xb9\x6d\x8d\xe5\x21\x75\xff\x15\x4d\x2d\x78\x1f\x15\x69\x6c\x23\x03\x5b\xf5\x6f\xed\x3e\x95\xde\x1b\x86\x68\x69\xce\xbd\x13\x44\xc6\x50\x0b\xda\x86\x7d\x44\xc6\xc0\x90\x55\xcb\xf7\x54\x59\x3b\x81\xc1\xac\x93\xc5\xbd\x2d\xee\xed\xca\x6f\xba\xde\xba\x1f\xb2\x82\x97\xea\xa3\x11\xe2\x91\x85\x52\x39\x4a\x3a\xab\xde\x4b\x04\xb8\x6f\x31\xe1\x33\x05\xac\xc0\x28\xdc\x53\x1a\xcb\xe0\x48\x21\xcc\x95\x73\x76\x26\xbd\x29\xc8\xe3\x1c\x19\xd4\x58\x09\x0f\x6a\x44\xae\xa8\x83\x80\x13\x32\xb8\xcd\x91\xd4\x88\x21\x47\xbb\x2e\xa1\x7c\x20\x9d\x14\xbf\xe0\x9c\xf6\x8b\xab\xa7\x9c\x52\x8e\xa9\x43\xdd\xc9\xd3\xb2\x56\x1c\xf2\x23\x53\x37\x48\x8e\xe5\x75\x35\x54\xcf\x9b\xb6\xa7\x30\xc9\xeb\xb6\x2f\xc5\xf8\xa7\xed\x8d\x3e\xc0\xe4\x3f\x21\xa4\x49\x10\x74\xf5\xd5\xbf\x3d\xfd\x00\x61\x2a\xc2\x78\xb7\x3d\x2f\x0f\x84\xa0\x06\x67\xcd\xc0\x87\x51\x3d\x11\x63\xb8\xd8\x79\x3c\xdc\xb7\xc6\x2f\x68\x5d\x61\x2f\x95\x35\x0e\xc4\x12\x3f\x1f\xa6\x79\x34\xdf\x01\x00\x00\xff\xff\x72\x1e\xb7\x63\x89\x02\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 649, mode: os.FileMode(420), modTime: time.Unix(1601451426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsDevJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd2\xb1\x6e\xf2\x30\x14\x05\xe0\x9d\xa7\x40\x99\xfe\x5f\x6d\x42\xa1\x14\x21\xa6\x56\x5d\xda\xb1\x4f\x80\x6c\xe7\x92\x58\x38\xb9\x96\x7d\x9d\x08\x55\x7d\xf7\x0a\x9b\x20\x63\x52\x58\x8f\xcf\xa7\x93\xc8\xfe\x9e\x4c\xa7\x59\x89\x0d\x93\xed\x96\x69\x6d\x05\x96\x90\x6d\xa6\x59\x4d\xa4\xed\x66\x36\x1b\xb2\xbc\x7b\xce\x6b\x57\x61\xd1\x03\x2f\x98\xd6\xd9\x63\x04\x2d\x31\x5b\xc7\xca\x07\x50\xe6\xdd\xfc\x6f\xb4\x77\x1c\x4a\x1e\xab\x90\xe4\xdd\xe2\x36\xea\x98\x53\x94\x3a\x1f\xde\xdd\xdb\xa1\x69\x52\x79\xcc\x6e\x42\x5d\x33\xd3\x80\x89\xdd\x29\xba\xbb\x27\x64\xba\x26\xe4\x5d\x64\x6b\x09\xaa\x4c\x61\x48\x6f\x62\x7e\x20\xe0\x4e\xaa\x12\x8c\x8d\xf9\x31\x2f\xce\x07\xb1\x68\x98\xd9\x03\x69\xc5\xc4\xc5\xa5\x47\x71\x31\x82\xb9\xc2\x6a\xeb\x8c\xba\xd8\x50\x58\x8d\x75\xad\x62\x62\x9f\x96\x7d\x58\x0c\x4f\xab\x10\xd8\x84\x72\x25\xa9\x76\x3c\x6d\x87\xf4\xd8\x3a\xbf\xc6\x50\xa7\x5e\x12\x81\x49\xfb\xa7\xd8\x83\x37\xad\xed\x3b\x96\xf0\xf1\x15\xc8\x8e\x09\xe0\x88\x57\x5f\xd4\xf7\x7d\x31\x9c\x8d\x2c\x1d\xd0\x91\xe3\x30\xa6\x4e\x47\x1e\x89\xf3\xde\x67\x2b\x82\x14\xd8\x12\x13\xb4\x85\x86\x49\x6f\xad\xd3\x1a\x0d\xbd\x5e\xff\xfd\x50\xd5\x35\xb6\xfe\x3a\x1e\xe6\xff\x56\x2f\x4f\xff\x17\xcb\x79\xbe\x5e\xae\x57\xd9\xe4\xe7\x37\x00\x00\xff\xff\x87\xfa\xd8\x2f\xae\x03\x00\x00")

func paramsDevJsonBytes() ([]byte, error) {
	return bindataRead(
		_paramsDevJson,
		"params.dev.json",
	)
}

func paramsDevJson() (*asset, error) {
	bytes, err := paramsDevJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.dev.json", size: 942, mode: os.FileMode(420), modTime: time.Unix(1593072898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xcf\x4e\x02\x31\x10\x87\xef\x3c\x05\xd9\x93\x46\x2d\x62\x90\x10\x4e\x1a\x2f\x7a\xf4\x09\x48\xff\x0c\x6c\x43\x77\xa7\x69\xa7\x6e\x88\xf1\xdd\xcd\xb6\x40\x4a\xbb\xd7\x6f\xbe\xdf\xcc\x34\xd3\xdf\xd9\x7c\xde\x28\xec\xb8\xee\x77\xdc\x5a\x2f\x51\x41\xb3\x9d\x37\x2d\x91\xf5\xdb\xc5\xe2\xc2\x98\xc4\xae\x79\xcc\x64\x4f\xdc\xb7\xb9\x19\x01\x73\xa1\xbf\xd1\x8e\x41\x80\x12\xb9\x97\x48\xd5\x6f\xc4\x3f\x3c\x18\x2a\xdd\x08\x27\xf5\x3d\xba\xae\xb4\x47\x56\xc9\xb6\xe5\xae\x03\x97\xbb\x67\xc4\xa4\xc1\xa0\xaa\xce\x52\x97\x7d\x99\xd4\x95\xe5\x5b\x0d\x46\x95\x66\xa2\xd5\x0e\xe2\x44\x20\x82\x36\x0a\x9c\xcf\x23\x23\x67\xd7\x42\x9e\xe8\xb8\x3b\x02\x59\xc3\xe5\xcd\x45\x32\xcc\x26\xc2\xc2\xe0\x61\x17\x9c\xb9\x99\x61\xf0\x30\xe5\x7a\xc3\xe5\xb1\x94\x23\x64\xf5\xdd\x0f\x9a\xda\x20\x4a\x3b\xd1\xd1\xba\x7e\x95\xa4\xd3\xa0\x89\xc0\x95\xfe\x19\xc7\xc0\xbb\xb5\xfe\x03\x15\x7c\x7e\xa7\xc8\x9e\x4b\x10\x88\xd5\x46\xc3\x30\xb0\x4b\x6d\x62\xd2\x09\x03\x05\x01\x53\xa9\x73\x29\x86\xe4\x75\xde\x57\x2f\x53\x52\x62\x4f\x5c\xd2\x0e\x3a\xae\x63\xd6\x07\x6b\xd1\xd1\x5b\xfd\xfa\x8b\x6a\x5b\xec\xe3\x39\x1e\x96\x77\xeb\xd7\xe7\xfb\x97\xd5\xf2\x69\xb3\xda\xac\x9b\xd9\xdf\x7f\x00\x00\x00\xff\xff\xe8\x61\x4b\x38\x4b\x03\x00\x00")

func paramsJsonBytes() ([]byte, error) {
	return bindataRead(
		_paramsJson,
		"params.json",
	)
}

func paramsJson() (*asset, error) {
	bytes, err := paramsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.json", size: 843, mode: os.FileMode(420), modTime: time.Unix(1603925976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json":     configJson,
	"params.dev.json": paramsDevJson,
	"params.json":     paramsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json":     &bintree{configJson, map[string]*bintree{}},
	"params.dev.json": &bintree{paramsDevJson, map[string]*bintree{}},
	"params.json":     &bintree{paramsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
